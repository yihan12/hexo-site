{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/oranges/source/css/base.css","path":"css/base.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/css/color-scheme.css","path":"css/color-scheme.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/css/github-markdown.css","path":"css/github-markdown.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/css/highlight.css","path":"css/highlight.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/oranges/source/css/comments.css","path":"css/comments.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/oranges/source/images/favicon.jpeg","path":"images/favicon.jpeg","modified":1,"renderable":1},{"_id":"themes/oranges/source/images/avatar1.png","path":"images/avatar1.png","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/clipboard.min.js","path":"plugins/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/gitalk.css","path":"plugins/gitalk.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/images/favicon1.png","path":"images/favicon1.png","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/gitalk.min.js","path":"plugins/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/jquery.fancybox.min.css","path":"plugins/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/jquery.fancybox.min.js","path":"plugins/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/jquery.min.js","path":"plugins/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/waline.css","path":"plugins/waline.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/waline.js","path":"plugins/waline.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/waline.mjs","path":"plugins/waline.mjs","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/activeNav.js","path":"js/activeNav.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/backtotop.js","path":"js/backtotop.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/valine.min.js","path":"plugins/valine.min.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/catalog.js","path":"js/catalog.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/colorscheme.js","path":"js/colorscheme.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/codeCopy.js","path":"js/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/shares.js","path":"js/shares.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/css/figcaption/mac-block.css","path":"css/figcaption/mac-block.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/mathjax/tex-chtml.js","path":"plugins/mathjax/tex-chtml.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Main-Regular.woff","path":"plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Main-Regular.woff","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Math-Italic.woff","path":"plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Math-Italic.woff","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Size1-Regular.woff","path":"plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Size1-Regular.woff","modified":1,"renderable":1},{"_id":"themes/oranges/source/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Zero.woff","path":"plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Zero.woff","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/.DS_Store","hash":"f1ff14a12af7054afb744111d3fecfb2f8575582","modified":1691927845934},{"_id":"source/categories/index.md","hash":"604a635fd603df744a2adcfc7253e2876bab4727","modified":1691893909242},{"_id":"source/about/index.md","hash":"6d25a1f5a28c87fc6a071e5e24a8789bc1fdec9e","modified":1691912831319},{"_id":"source/friends/index.md","hash":"b48eb357e54258e2cc4bd7d2eaac6462de1c8bdc","modified":1691895646518},{"_id":"source/_posts/js去除中括号.md","hash":"0affbf8474f798d07c216bcdac928627abe12470","modified":1691908985380},{"_id":"source/tags/index.md","hash":"e5efda02833ca720ce647161b6edb9326b8e8035","modified":1691891512600},{"_id":"source/_posts/Echarts/echarts--xy轴刻度、文字、轴线样式、分隔线.md","hash":"d662514623227a14cb5e79500c3228626f81569c","modified":1691928034710},{"_id":"source/_posts/Echarts/echarts--上下左右的距离（grid）.md","hash":"94fafa749fd44c42abd87614466bb0a747aeda57","modified":1691927977355},{"_id":"source/_posts/ES6学习笔记/【ES6学习笔记】之 变量.md","hash":"a0904549497b8a42173a7d264d6bf7841d8e17e0","modified":1691909028290},{"_id":"source/_posts/Echarts/echarts--基准线markLine.md","hash":"0c66482d620e34e7978e7a59911c3ace29ea24f4","modified":1691927943620},{"_id":"source/_posts/Echarts/echarts图例--选中状态（默认不显示置灰）.md","hash":"ca943c8e0072921ed155c2c9253f2961712deb7f","modified":1691928118162},{"_id":"source/_posts/Echarts/echarts折线--无数据时连线与否.md","hash":"7a5c97668fe2191c31b333499930611de715b1d1","modified":1691928199214},{"_id":"source/_posts/Echarts/echarts圆柱--设置柱子的borderRadius.md","hash":"da8d10ece90a0b5c19d8d5362610c545d09d7aea","modified":1691928168399},{"_id":"source/_posts/Echarts/echarts折线图--无拐点，折线样式.md","hash":"120a52bb22b03d6daa4e7c124c3b432da8269074","modified":1691928219460},{"_id":"source/_posts/Echarts/echarts柱形--设置柱子多个颜色（渐进色）.md","hash":"5902d94421783149ab8eddb8a495023fe48f8591","modified":1691928251419},{"_id":"source/_posts/Echarts/echats折线--拐点圆的样式（内圆外圆）.md","hash":"5d70fcdbc36350ce13dbed80e0fb0704c4bafdd5","modified":1691928301261},{"_id":"source/_posts/Echarts/echarts设置从原点开始.md","hash":"626ac6aaace9b50e1aa65895e670e871362d110e","modified":1691928074812},{"_id":"source/_posts/ES6学习笔记/【ES6学习笔记】之解构赋值.md","hash":"3af6d290ec4865d67953200b37a372bf266b0ed2","modified":1691909037563},{"_id":"source/_posts/浏览器/ 【浏览器】之同源策略.md","hash":"fe4b9908989392d203d25a62970097f2849efbf9","modified":1691911038346},{"_id":"themes/oranges/source/css/_common/layout/header.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1691857808217},{"_id":"themes/oranges/.gitignore","hash":"986003ff5239d03749d3d3b570671bbb7ffadba6","modified":1691857808214},{"_id":"themes/oranges/_config.yml","hash":"a1ab4ffa1c0ffbabab54d4b9252f967395b01fb9","modified":1691911362536},{"_id":"themes/oranges/languages/default.yml","hash":"c8740c9a9faafd28d8ba8eb60d28e0160e5f9839","modified":1691857808214},{"_id":"themes/oranges/languages/de.yml","hash":"72cc121b4a9e18c55623cf8035d288e415841851","modified":1691857808214},{"_id":"themes/oranges/languages/es.yml","hash":"29cf37178f7596fe408cd3234d3addb880608287","modified":1691857808215},{"_id":"themes/oranges/languages/ko.yml","hash":"98f150835d5b039cdfe1cf8b32df815d8d763231","modified":1691857808215},{"_id":"themes/oranges/languages/ja.yml","hash":"08c64794618945b5da0edcc5065e46577fbd5ff3","modified":1691857808215},{"_id":"themes/oranges/languages/nl.yml","hash":"e6f86d1bc16c916089057e8c8d354983ee839d21","modified":1691857808215},{"_id":"themes/oranges/languages/no.yml","hash":"1c6fd53c378fdd00c2f84ef0af4f61c1f8ea4f8b","modified":1691857808215},{"_id":"themes/oranges/languages/pt.yml","hash":"0719f13aa9f5211400b129d310f517750f4a6e0b","modified":1691857808215},{"_id":"themes/oranges/languages/fr.yml","hash":"ac102613f8a7f10b32b6e38d99d5511034733a0d","modified":1691857808215},{"_id":"themes/oranges/languages/ru.yml","hash":"ada59b0713fef0e6617a12b20065ce9b24234521","modified":1691857808215},{"_id":"themes/oranges/languages/zh-CN.yml","hash":"3a3b4ade3ffcf5ef330e31d3ce0d69804cfa7c26","modified":1691857808215},{"_id":"themes/oranges/languages/zh-TW.yml","hash":"3d26316a125ea18c64658d4e028351e395e45756","modified":1691857808215},{"_id":"themes/oranges/layout/archive.ejs","hash":"9c314d52ecb3ea491eb49a27adce76bb0b817ef2","modified":1691857808216},{"_id":"themes/oranges/LICENSE","hash":"f811cebccc40c019ffd2156f1f15e226e1b86f79","modified":1691857808214},{"_id":"themes/oranges/README-zh.md","hash":"93f142c18fa3ede208610f9e4a37a5e281293a22","modified":1691857808214},{"_id":"themes/oranges/layout/layout.ejs","hash":"6fda0898d5b68f624cc1aea5ea0af6cd8570b5e7","modified":1691857808216},{"_id":"themes/oranges/layout/index.ejs","hash":"492bd5d33bf4a5d8baec1028dd54180d4caec3ef","modified":1691857808216},{"_id":"themes/oranges/README.md","hash":"3c8682895cf49ac9c0570140477561ec52594f71","modified":1691857808214},{"_id":"themes/oranges/layout/tag.ejs","hash":"2969bf8ba785fa9f592162e3b6fb3e7ae98eba64","modified":1691857808217},{"_id":"themes/oranges/layout/post.ejs","hash":"5d46348e1fdeaceb227b2882e933c121e5c67e9a","modified":1691857808216},{"_id":"themes/oranges/layout/_partial/backtotop.ejs","hash":"e735b296b20f6d33ee42b307541b3ce1cd83fea7","modified":1691857808215},{"_id":"themes/oranges/layout/category.ejs","hash":"ad8ef3de7066f2f7a4d8e603c9ee9ed3e5aa237e","modified":1691857808216},{"_id":"themes/oranges/layout/_partial/catalog.ejs","hash":"7ecb4ec83b999b583aa5ae53b559ac4dd3d29de3","modified":1691857808215},{"_id":"themes/oranges/layout/_partial/clipboard.ejs","hash":"1ff3bf121081a39fea3ed430e26a458539721548","modified":1691857808215},{"_id":"themes/oranges/layout/_partial/comments.ejs","hash":"8ece1ea9c8afc70e2d643c7189b4511269942807","modified":1691857808216},{"_id":"themes/oranges/layout/_partial/mathjax.ejs","hash":"5e8d2451afd75f1a37148325b9d6a5ecd5140bad","modified":1691857808216},{"_id":"themes/oranges/layout/_partial/navigation.ejs","hash":"b345ef52f0211b259a051940db044ba33567717d","modified":1691857808216},{"_id":"themes/oranges/layout/_partial/search.ejs","hash":"ecd4bdf9f964e6cede204e71695a28f12b799a26","modified":1691857808216},{"_id":"themes/oranges/layout/_partial/footer.ejs","hash":"b80cea1138c6c4c958b5535df153790ad49f7305","modified":1691857808216},{"_id":"themes/oranges/layout/_partial/shares.ejs","hash":"7d162af78648d83149397c2a7e24939cc29a6725","modified":1691857808216},{"_id":"themes/oranges/layout/_partial/header.ejs","hash":"254db440d03dbf8d1994ec24e6f1ee443b8ccdc8","modified":1691857808216},{"_id":"themes/oranges/layout/_partial/colorscheme.ejs","hash":"0cead620bac1effa5a972ee7e94ac83495cb6a9d","modified":1691857808215},{"_id":"themes/oranges/source/css/base.css","hash":"6fc8a265777c40336678c9b5cc033f7399b55459","modified":1691857808218},{"_id":"themes/oranges/source/css/color-scheme.css","hash":"ec1e624f750e8caf5d463437b06bd1f705173467","modified":1691857808218},{"_id":"themes/oranges/source/css/github-markdown.css","hash":"0dc8e66ad2121924445150eb59a5f6091662f6f7","modified":1691857808218},{"_id":"themes/oranges/source/css/highlight.css","hash":"7ebfcbb58e87dd0436ab9538641eb6577fa7a8f8","modified":1691857808218},{"_id":"themes/oranges/source/css/comments.css","hash":"0bf6e453cd42da1dc96b4f90b5023e437d1454e0","modified":1691857808218},{"_id":"themes/oranges/source/images/avatar1.png","hash":"642ef58c0781d0f1885775ddd349ca7af65f24b0","modified":1691857808219},{"_id":"themes/oranges/source/css/main.styl","hash":"cd4729f50c22948103d8fa513412822f32c7ba5c","modified":1691857808219},{"_id":"themes/oranges/source/plugins/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1691857808220},{"_id":"themes/oranges/source/plugins/clipboard.min.js","hash":"9a7cb405f9beed005891587d41f76a0720893ffc","modified":1691857808220},{"_id":"themes/oranges/source/images/favicon1.png","hash":"21cf9c2e9c36c244a6542a3b6c220f13fa1a67cc","modified":1691857808219},{"_id":"themes/oranges/source/images/avatar.jpeg","hash":"4111590cb829b7159c29d8f4f2356547a9d0e094","modified":1691905890175},{"_id":"themes/oranges/source/plugins/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1691857808222},{"_id":"themes/oranges/source/images/favicon.jpeg","hash":"4111590cb829b7159c29d8f4f2356547a9d0e094","modified":1691906631799},{"_id":"themes/oranges/source/plugins/waline.css","hash":"ba52d91d4685f8e07423a5651fea8a8f5151f457","modified":1691857808228},{"_id":"themes/oranges/source/js/activeNav.js","hash":"06aa9a2985f1d328f0b7fe69a28bee31f16ebb1a","modified":1691857808219},{"_id":"themes/oranges/source/js/backtotop.js","hash":"0be1bd072a7a34ce50d72376cad722023e772e6d","modified":1691857808219},{"_id":"themes/oranges/source/js/colorscheme.js","hash":"1290f902b5651bf4d66187b5695ec90dc3ec70a8","modified":1691857808219},{"_id":"themes/oranges/source/js/catalog.js","hash":"3f895778af2029bff0cd588eeca0a8b64845065d","modified":1691857808219},{"_id":"themes/oranges/source/js/fancybox.js","hash":"b217d56f8db94498d7e272d164abac6ab1c07ddd","modified":1691857808219},{"_id":"themes/oranges/source/js/codeCopy.js","hash":"3fab7bf3e0d22326440af1963e83448f8b8b4ab6","modified":1691857808219},{"_id":"themes/oranges/source/js/search.js","hash":"374efc788268330edd7ca0c91a43e75f7ec4149c","modified":1691857808219},{"_id":"themes/oranges/source/js/shares.js","hash":"aa0a3dd5c24efe7945351f7ac22d0f84a93e350c","modified":1691857808219},{"_id":"themes/oranges/source/css/figcaption/mac-block.css","hash":"d923323312d78ecb40cb60c093dba36b0127db68","modified":1691857808218},{"_id":"themes/oranges/source/css/_common/comments/index.styl","hash":"51debb54c93bdb79e19329e5f14c77efcc5d36d6","modified":1691857808217},{"_id":"themes/oranges/source/css/_common/comments/valine.styl","hash":"d15fba0d2fa4712da96d44763a94b420d7419835","modified":1691857808217},{"_id":"themes/oranges/source/css/_common/layout/footer.styl","hash":"d9c4019615db0cacb0ff139c3e44a8f97fda3ffb","modified":1691857808217},{"_id":"themes/oranges/source/css/_common/components/fancybox.styl","hash":"e0902e4aa71a99ac0db79f8f248f81e91265aebd","modified":1691857808217},{"_id":"themes/oranges/source/css/_common/layout/index.styl","hash":"40b9c3aa77b9b9fa3d9c6207c42fbd85b541960f","modified":1691857808217},{"_id":"themes/oranges/source/css/_common/utils/index.styl","hash":"6abd3b97a6e742c18382bd10c6c5e8d696f428b2","modified":1691857808217},{"_id":"themes/oranges/source/css/_common/components/index.styl","hash":"37b7b72bf95709fa8e8f85800812530b69e685dd","modified":1691857808217},{"_id":"themes/oranges/source/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Main-Regular.woff","hash":"89d2c8d274693c5a6e250e96e2a2e26e25619079","modified":1691857808223},{"_id":"themes/oranges/source/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Math-Italic.woff","hash":"91a4025dd3b18ca6bda63a215869773705435041","modified":1691857808224},{"_id":"themes/oranges/source/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Zero.woff","hash":"6712cf0aa5c12edc1cbbca8a1732a9cde0854c48","modified":1691857808224},{"_id":"themes/oranges/source/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Size1-Regular.woff","hash":"9c98f9f022647eb802434947e062b569ccedd5f0","modified":1691857808224},{"_id":"themes/oranges/source/plugins/jquery.fancybox.min.js","hash":"b2b093d8f5ffeee250c8d0d3a2285a213318e4ea","modified":1691857808223},{"_id":"themes/oranges/source/plugins/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1691857808223},{"_id":"themes/oranges/source/plugins/waline.js","hash":"c26a8b22924813d883fb23e232063dce9b4e01c3","modified":1691857808229},{"_id":"themes/oranges/source/plugins/waline.mjs","hash":"758addf5769f9c1537a7b7ec6fcfb52a93e49ef5","modified":1691857808229},{"_id":"themes/oranges/source/plugins/valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1691857808228},{"_id":"themes/oranges/source/plugins/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1691857808222},{"_id":"themes/oranges/source/plugins/mathjax/tex-chtml.js","hash":"bef586271c8246d003509a68b8f11181d967847d","modified":1691857808227},{"_id":"public/categories/index.html","hash":"ca5068b4c8ef2ff7a9254dd509e8e583892d30f0","modified":1691928333254},{"_id":"public/about/index.html","hash":"76b621aaf4045e9a851aea3360867f2086a89ae7","modified":1691928333254},{"_id":"public/tags/index.html","hash":"cfcca677142f58c0122a5648e655768f07273232","modified":1691928333254},{"_id":"public/friends/index.html","hash":"67ddb1e39d130cb09a0fb05dbcae1a806f69911d","modified":1691928333254},{"_id":"public/categories/前端/index.html","hash":"0e35788b60144aba1c919a17033ec371c1b4d33a","modified":1691928333254},{"_id":"public/categories/前端/page/2/index.html","hash":"616b2d8fa43bdf78a5157a402c22434eeaf41d8c","modified":1691928333254},{"_id":"public/categories/前端/正则/index.html","hash":"0e9fd08ce087f1f755f0979e3907baa1ff5655de","modified":1691928333254},{"_id":"public/categories/前端/Echarts/index.html","hash":"7bdf8fa96ec4555bbd98af73b262552c71034775","modified":1691928333254},{"_id":"public/categories/前端/ES6/index.html","hash":"abf01f4b16c5c08d13415c82ae212ed7161cd795","modified":1691928333254},{"_id":"public/categories/前端/浏览器/同源策略/index.html","hash":"9b2bef3b435254668c74ec3ac950fa54866275eb","modified":1691928333254},{"_id":"public/categories/前端/Echarts/grid/index.html","hash":"b22527f7a265d126fdd5b66d20b0ad043a73936c","modified":1691928333254},{"_id":"public/categories/前端/Echarts/markLine/index.html","hash":"e77d2681a2a92791feac5a1813a6c05c0b9b710d","modified":1691928333254},{"_id":"public/categories/前端/ES6/变量/index.html","hash":"38761bd6fb877967ef4e84ff9402202b2ac336d4","modified":1691928333254},{"_id":"public/categories/前端/Echarts/connectNulls/index.html","hash":"cb55235b1e2b662a0914d06f04c74ff512485e3c","modified":1691928333254},{"_id":"public/categories/前端/浏览器/index.html","hash":"1a01f7df8163d2caa3ce762660b96b6946e16f26","modified":1691928333254},{"_id":"public/categories/前端/Echarts/legend/index.html","hash":"479cd5cbedc4f4e102bb399d64cee48f402cafc2","modified":1691928333254},{"_id":"public/categories/前端/Echarts/xAxis/index.html","hash":"e033962d65edc75d7badc167fc609b15105dbb2c","modified":1691928333254},{"_id":"public/categories/前端/ES6/解构/index.html","hash":"db1ebe5de4edd7785983076b3d5a7cd6fa147bbd","modified":1691928333254},{"_id":"public/categories/前端/Echarts/borderRadius/index.html","hash":"d18e92f7e8c9883f312e698265226c9bba2203b9","modified":1691928333254},{"_id":"public/categories/前端/Echarts/symbolSize/index.html","hash":"d801e081b7c81087beafbe5192f0a9066ca2a862","modified":1691928333254},{"_id":"public/categories/前端/Echarts/symbol/index.html","hash":"9cb032a946119ca9de8d1b75fdc137f1404a4ddf","modified":1691928333254},{"_id":"public/categories/前端/Echarts/boundaryGap/index.html","hash":"ffe2d64f47ec73925611d9003fc0651cd1431d51","modified":1691928333254},{"_id":"public/categories/前端/Echarts/itemStyle/index.html","hash":"ce00d767574062991a414640d6f86a650ae14cb4","modified":1691928333254},{"_id":"public/index.html","hash":"b25b0cb903c02cdc5ab353e35242e98b1901710b","modified":1691928333254},{"_id":"public/tags/js/index.html","hash":"dde6974f799cf8ac22a9053a6248f126923e0586","modified":1691928333254},{"_id":"public/page/2/index.html","hash":"65b6490a2c4032f06af29db88d18266e4fb4c465","modified":1691928333254},{"_id":"public/tags/正则/index.html","hash":"4c119a6588790573fb1876d81c352ee2326cf51f","modified":1691928333254},{"_id":"public/tags/JavaScript/index.html","hash":"a062843ff2e3fdea781187edba72aa97aea104b5","modified":1691928333254},{"_id":"public/tags/ES6/index.html","hash":"b4cd6d33318a158b69d9ad63a1391ec210624497","modified":1691928333254},{"_id":"public/2023/08/13/浏览器/ 【浏览器】之同源策略/index.html","hash":"d3c3e78006d17d07f41a781d806a8ecb1e8d6bb9","modified":1691928333254},{"_id":"public/2023/08/13/ES6学习笔记/【ES6学习笔记】之 变量/index.html","hash":"9977a9809e0eb7c94084adfc7f76c1268e291be3","modified":1691928333254},{"_id":"public/2023/08/13/js去除中括号/index.html","hash":"866c0932ed91899322fae9c36a57578f06902e1a","modified":1691928333254},{"_id":"public/2023/08/13/ES6学习笔记/【ES6学习笔记】之解构赋值/index.html","hash":"1c57bc626ee96f5b2b756a6588e5af0d28fa61a2","modified":1691928333254},{"_id":"public/2022/03/10/Echarts/echats折线--拐点圆的样式（内圆外圆）/index.html","hash":"c10e3a0aae04a7dcafefbb2c922971367aa2bb85","modified":1691928333254},{"_id":"public/2022/03/10/Echarts/echarts柱形--设置柱子多个颜色（渐进色）/index.html","hash":"ca0811e6730de8a3dc5bb9496681eaca855391b6","modified":1691928333254},{"_id":"public/2022/03/10/Echarts/echarts折线图--无拐点，折线样式/index.html","hash":"b75108cb0a43c81bba77792a89409eb6773fe065","modified":1691928333254},{"_id":"public/2022/03/10/Echarts/echarts折线--无数据时连线与否/index.html","hash":"ae55a292563345f80f0a42acc7315b66559e698b","modified":1691928333254},{"_id":"public/2022/03/10/Echarts/echarts圆柱--设置柱子的borderRadius/index.html","hash":"95028cf2392de6da41545467a0e505628dce9b04","modified":1691928333254},{"_id":"public/2022/03/10/Echarts/echarts图例--选中状态（默认不显示置灰）/index.html","hash":"5159f469e329a803cc1e17a764ec3b0b26dc5db5","modified":1691928333254},{"_id":"public/2022/03/10/Echarts/echarts--上下左右的距离（grid）/index.html","hash":"dd512e62949400747eb086f9a34c9100a7120674","modified":1691928333254},{"_id":"public/2022/03/10/Echarts/echarts--基准线markLine/index.html","hash":"838b57d232269c78c8af28b97febc01570dfb092","modified":1691928333254},{"_id":"public/2022/03/10/Echarts/echarts--xy轴刻度、文字、轴线样式、分隔线/index.html","hash":"56e6b570d87fd4f0a7158a9ac1a780b6da3a50d5","modified":1691928333254},{"_id":"public/2022/03/10/Echarts/echarts设置从原点开始/index.html","hash":"a4c09925eeb5cc9c5235fea2b495e25d3818cced","modified":1691928333254},{"_id":"public/archives/index.html","hash":"73147a009245329c56ebab8ed0fea0716c01e6c0","modified":1691928333254},{"_id":"public/archives/page/2/index.html","hash":"73147a009245329c56ebab8ed0fea0716c01e6c0","modified":1691928333254},{"_id":"public/archives/2022/03/index.html","hash":"f6a9d50bc5be2388736dc73cb8540ff81e67a022","modified":1691928333254},{"_id":"public/archives/2022/index.html","hash":"9ac3d7f08ca67d967d46da9b64b2346e19cc0e2f","modified":1691928333254},{"_id":"public/archives/2023/index.html","hash":"e20994f901429334928830a0bff054681d6548d9","modified":1691928333254},{"_id":"public/archives/2023/08/index.html","hash":"576b2dcad6529cbe17ff9562641c61818c9512ed","modified":1691928333254},{"_id":"public/tags/前端/index.html","hash":"5fb39d08f08e98ba426e80a2789046b6897e6814","modified":1691928333254},{"_id":"public/tags/浏览器/index.html","hash":"5df4d89598f2b40faf6746835f31dc4472830a82","modified":1691928333254},{"_id":"public/tags/Echarts/index.html","hash":"8a88506f37618a271824e784b9c62734df54591e","modified":1691928333254},{"_id":"public/images/avatar.jpeg","hash":"4111590cb829b7159c29d8f4f2356547a9d0e094","modified":1691928333254},{"_id":"public/images/favicon.jpeg","hash":"4111590cb829b7159c29d8f4f2356547a9d0e094","modified":1691928333254},{"_id":"public/images/avatar1.png","hash":"642ef58c0781d0f1885775ddd349ca7af65f24b0","modified":1691928333254},{"_id":"public/images/favicon1.png","hash":"21cf9c2e9c36c244a6542a3b6c220f13fa1a67cc","modified":1691928333254},{"_id":"public/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Main-Regular.woff","hash":"89d2c8d274693c5a6e250e96e2a2e26e25619079","modified":1691928333254},{"_id":"public/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Zero.woff","hash":"6712cf0aa5c12edc1cbbca8a1732a9cde0854c48","modified":1691928333254},{"_id":"public/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Size1-Regular.woff","hash":"9c98f9f022647eb802434947e062b569ccedd5f0","modified":1691928333254},{"_id":"public/plugins/mathjax/output/chtml/fonts/woff-v2/MathJax_Math-Italic.woff","hash":"91a4025dd3b18ca6bda63a215869773705435041","modified":1691928333254},{"_id":"public/plugins/waline.mjs","hash":"758addf5769f9c1537a7b7ec6fcfb52a93e49ef5","modified":1691928333254},{"_id":"public/css/base.css","hash":"6fc8a265777c40336678c9b5cc033f7399b55459","modified":1691928333254},{"_id":"public/css/highlight.css","hash":"7ebfcbb58e87dd0436ab9538641eb6577fa7a8f8","modified":1691928333254},{"_id":"public/css/color-scheme.css","hash":"ec1e624f750e8caf5d463437b06bd1f705173467","modified":1691928333254},{"_id":"public/css/comments.css","hash":"0bf6e453cd42da1dc96b4f90b5023e437d1454e0","modified":1691928333254},{"_id":"public/css/github-markdown.css","hash":"0dc8e66ad2121924445150eb59a5f6091662f6f7","modified":1691928333254},{"_id":"public/plugins/clipboard.min.js","hash":"9a7cb405f9beed005891587d41f76a0720893ffc","modified":1691928333254},{"_id":"public/plugins/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1691928333254},{"_id":"public/js/colorscheme.js","hash":"1290f902b5651bf4d66187b5695ec90dc3ec70a8","modified":1691928333254},{"_id":"public/js/backtotop.js","hash":"0be1bd072a7a34ce50d72376cad722023e772e6d","modified":1691928333254},{"_id":"public/js/catalog.js","hash":"3f895778af2029bff0cd588eeca0a8b64845065d","modified":1691928333254},{"_id":"public/js/codeCopy.js","hash":"3fab7bf3e0d22326440af1963e83448f8b8b4ab6","modified":1691928333254},{"_id":"public/js/fancybox.js","hash":"b217d56f8db94498d7e272d164abac6ab1c07ddd","modified":1691928333254},{"_id":"public/js/search.js","hash":"374efc788268330edd7ca0c91a43e75f7ec4149c","modified":1691928333254},{"_id":"public/js/shares.js","hash":"aa0a3dd5c24efe7945351f7ac22d0f84a93e350c","modified":1691928333254},{"_id":"public/js/activeNav.js","hash":"06aa9a2985f1d328f0b7fe69a28bee31f16ebb1a","modified":1691928333254},{"_id":"public/css/figcaption/mac-block.css","hash":"d923323312d78ecb40cb60c093dba36b0127db68","modified":1691928333254},{"_id":"public/css/main.css","hash":"55ebc953b7cdf77bbb55238d42367d36fde25418","modified":1691928333254},{"_id":"public/plugins/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1691928333254},{"_id":"public/plugins/waline.css","hash":"ba52d91d4685f8e07423a5651fea8a8f5151f457","modified":1691928333254},{"_id":"public/plugins/jquery.fancybox.min.js","hash":"b2b093d8f5ffeee250c8d0d3a2285a213318e4ea","modified":1691928333254},{"_id":"public/plugins/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1691928333254},{"_id":"public/plugins/waline.js","hash":"c26a8b22924813d883fb23e232063dce9b4e01c3","modified":1691928333254},{"_id":"public/plugins/valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1691928333254},{"_id":"public/plugins/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1691928333254},{"_id":"public/plugins/mathjax/tex-chtml.js","hash":"bef586271c8246d003509a68b8f11181d967847d","modified":1691928333254}],"Category":[{"name":"前端","_id":"cll9eg18i00044i2v2or3glok"},{"name":"浏览器","parent":"cll9eg18i00044i2v2or3glok","_id":"cll9eg18n000j4i2v30fsd7l5"},{"name":"正则","parent":"cll9eg18i00044i2v2or3glok","_id":"cll9eg18o000m4i2v8ogeeqfs"},{"name":"Echarts","parent":"cll9eg18i00044i2v2or3glok","_id":"cll9eg18o000p4i2vbwpbgafe"},{"name":"ES6","parent":"cll9eg18i00044i2v2or3glok","_id":"cll9eg18p000x4i2vev9mafpc"},{"name":"同源策略","parent":"cll9eg18n000j4i2v30fsd7l5","_id":"cll9eg18q00194i2v9uxzg2c7"},{"name":"grid","parent":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg18r001c4i2v7umj9tp9"},{"name":"markLine","parent":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg18r001g4i2v1xju2icj"},{"name":"变量","parent":"cll9eg18p000x4i2vev9mafpc","_id":"cll9eg18s001n4i2v3arq199n"},{"name":"connectNulls","parent":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg18s001q4i2v0qnff9ho"},{"name":"legend","parent":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg18s001v4i2v0kge2he8"},{"name":"xAxis","parent":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg18t001z4i2vfk8ia508"},{"name":"解构","parent":"cll9eg18p000x4i2vev9mafpc","_id":"cll9eg18v002f4i2vehi26sjr"},{"name":"borderRadius","parent":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg18z002k4i2vglzmg6ma"},{"name":"symbolSize","parent":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg190002p4i2v5ymkdox8"},{"name":"boundaryGap","parent":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg191002v4i2vg16eb5y5"},{"name":"symbol","parent":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg19100304i2vbcw1be6t"},{"name":"itemStyle","parent":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg19200354i2v0z5b18o2"}],"Data":[],"Page":[{"title":"about","date":"2023-08-13T07:47:11.319Z","type":"about","categories":null,"tags":null,"_content":"\n### Hi there, I'm yihan123 👋\n\n👯 I'm Peng Yao hui, a web frontend developer from ChangSha, China.\n\n- 🌱 : JavaScript/Css3/Html5/Vue/React\n- 🔭 : Work in shenzhen\n- 😄 : CSDN:[易函 123](https://blog.csdn.net/qq_43485006)/思否:[易函 123](https://segmentfault.com/u/yihan123)/掘金:[易函 123](https://juejin.cn/user/3016715638158381)/博客园：[易函 123](https://www.cnblogs.com/yihan123/)\n- 💬 : Email: 1245501816@qq.com\n- ⚡ : Live and learn\n","source":"about/index.md","raw":"---\ntitle: about\ndate:\ntype: 'about'\ncategories:\ntags:\n---\n\n### Hi there, I'm yihan123 👋\n\n👯 I'm Peng Yao hui, a web frontend developer from ChangSha, China.\n\n- 🌱 : JavaScript/Css3/Html5/Vue/React\n- 🔭 : Work in shenzhen\n- 😄 : CSDN:[易函 123](https://blog.csdn.net/qq_43485006)/思否:[易函 123](https://segmentfault.com/u/yihan123)/掘金:[易函 123](https://juejin.cn/user/3016715638158381)/博客园：[易函 123](https://www.cnblogs.com/yihan123/)\n- 💬 : Email: 1245501816@qq.com\n- ⚡ : Live and learn\n","updated":"2023-08-13T07:47:11.319Z","path":"about/index.html","comments":1,"layout":"page","_id":"cll9eg18e00004i2v4n3k7tb9","content":"<h3 id=\"Hi-there-I’m-yihan123-👋\"><a href=\"#Hi-there-I’m-yihan123-👋\" class=\"headerlink\" title=\"Hi there, I’m yihan123 👋\"></a>Hi there, I’m yihan123 👋</h3><p>👯 I’m Peng Yao hui, a web frontend developer from ChangSha, China.</p>\n<ul>\n<li>🌱 : JavaScript&#x2F;Css3&#x2F;Html5&#x2F;Vue&#x2F;React</li>\n<li>🔭 : Work in shenzhen</li>\n<li>😄 : CSDN:<a href=\"https://blog.csdn.net/qq_43485006\">易函 123</a>&#x2F;思否:<a href=\"https://segmentfault.com/u/yihan123\">易函 123</a>&#x2F;掘金:<a href=\"https://juejin.cn/user/3016715638158381\">易函 123</a>&#x2F;博客园：<a href=\"https://www.cnblogs.com/yihan123/\">易函 123</a></li>\n<li>💬 : Email: <a href=\"mailto:&#49;&#50;&#52;&#53;&#53;&#48;&#x31;&#x38;&#49;&#54;&#64;&#113;&#x71;&#46;&#99;&#111;&#109;\">&#49;&#50;&#52;&#53;&#53;&#48;&#x31;&#x38;&#49;&#54;&#64;&#113;&#x71;&#46;&#99;&#111;&#109;</a></li>\n<li>⚡ : Live and learn</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Hi-there-I’m-yihan123-👋\"><a href=\"#Hi-there-I’m-yihan123-👋\" class=\"headerlink\" title=\"Hi there, I’m yihan123 👋\"></a>Hi there, I’m yihan123 👋</h3><p>👯 I’m Peng Yao hui, a web frontend developer from ChangSha, China.</p>\n<ul>\n<li>🌱 : JavaScript&#x2F;Css3&#x2F;Html5&#x2F;Vue&#x2F;React</li>\n<li>🔭 : Work in shenzhen</li>\n<li>😄 : CSDN:<a href=\"https://blog.csdn.net/qq_43485006\">易函 123</a>&#x2F;思否:<a href=\"https://segmentfault.com/u/yihan123\">易函 123</a>&#x2F;掘金:<a href=\"https://juejin.cn/user/3016715638158381\">易函 123</a>&#x2F;博客园：<a href=\"https://www.cnblogs.com/yihan123/\">易函 123</a></li>\n<li>💬 : Email: <a href=\"mailto:&#49;&#50;&#52;&#53;&#53;&#48;&#x31;&#x38;&#49;&#54;&#64;&#113;&#x71;&#46;&#99;&#111;&#109;\">&#49;&#50;&#52;&#53;&#53;&#48;&#x31;&#x38;&#49;&#54;&#64;&#113;&#x71;&#46;&#99;&#111;&#109;</a></li>\n<li>⚡ : Live and learn</li>\n</ul>\n"},{"title":"categories","date":"2023-08-13T02:31:49.242Z","type":"categories","categories":null,"tags":null,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate:\ntype: 'categories'\ncategories:\ntags:\n---\n","updated":"2023-08-13T02:31:49.242Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cll9eg18h00024i2vde3zgb5b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2023-08-13T01:51:52.600Z","type":"tags","categories":null,"tags":null,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate:\ntype: 'tags'\ncategories:\ntags:\n---\n","updated":"2023-08-13T01:51:52.600Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cll9eg18j00064i2v9vsedvpt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","date":"2023-08-13T03:00:46.518Z","type":"friends","categories":null,"tags":null,"_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate:\ntype: 'friends'\ncategories:\ntags:\n---\n","updated":"2023-08-13T03:00:46.518Z","path":"friends/index.html","comments":1,"layout":"page","_id":"cll9eg18j00084i2vg6m187ye","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"js去除中括号","date":"2023-08-13T01:44:43.677Z","_content":"\n```javascript\nvar str = '这是一个字符串[html]语句;[html]字符串很常见';<br>\nalert(str.replace(/\\[|]/g,''));//移除字符串中的所有[]括号（不包括其内容）\n//输出：这是一个字符串html语句;html字符串很常见<br>\nalert(str.replace(/\\[.*?\\]/g,''));//移除字符串中的所有[]括号（包括其内容）\n//输出：这是一个字符串语句;字符串很常见\n```\n\n### 移除所有中括号,不包括其内容\n\n```javascript\nlet str = '[1,2,3,4,5,6,7,8]'\nlet newStr = str.replace(/\\[|]/g, '')\nconsole.log(newStr) //1,2,3,4,5,6,7,8\n```\n\n### 移除所有中括号,包括其内容\n\n```javascript\nlet str = '[1,2,3,4,5,6,7,8]'\nlet newStr = str.replace(/\\[.*?\\]/g, '')\nconsole.log(newStr) //''\n```\n\n<!--more-->\n\n### 正则表达式符号释义\n\n- \"\\\"：将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配一个换行符。串行“\\\\”匹配“\\”而“\\(”则匹配“(”；\n\n- \"|\"：或的意思；\n\n- \"/g\"：全局搜索。由于此处要去除字符串中所有中括号，因此正则中要开启全局搜索；\n\n- \".\"：表示除换行符和其他 Unicode 行终止符之外的任意字符；\n\n- \"*\"：匹配前面的子表达式零次或多次。例如，zo*能匹配“z”以及“zoo”。\\*等价于{0,}；\n\n- \"?\"：匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“does”或“does”中的“do”。?等价于{0,1}。（贪婪模式）\n","source":"_posts/js去除中括号.md","raw":"---\ntitle: js去除中括号\ndate:\ntags: [js, 正则]\ncategories: [前端, 正则]\n---\n\n```javascript\nvar str = '这是一个字符串[html]语句;[html]字符串很常见';<br>\nalert(str.replace(/\\[|]/g,''));//移除字符串中的所有[]括号（不包括其内容）\n//输出：这是一个字符串html语句;html字符串很常见<br>\nalert(str.replace(/\\[.*?\\]/g,''));//移除字符串中的所有[]括号（包括其内容）\n//输出：这是一个字符串语句;字符串很常见\n```\n\n### 移除所有中括号,不包括其内容\n\n```javascript\nlet str = '[1,2,3,4,5,6,7,8]'\nlet newStr = str.replace(/\\[|]/g, '')\nconsole.log(newStr) //1,2,3,4,5,6,7,8\n```\n\n### 移除所有中括号,包括其内容\n\n```javascript\nlet str = '[1,2,3,4,5,6,7,8]'\nlet newStr = str.replace(/\\[.*?\\]/g, '')\nconsole.log(newStr) //''\n```\n\n<!--more-->\n\n### 正则表达式符号释义\n\n- \"\\\"：将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配一个换行符。串行“\\\\”匹配“\\”而“\\(”则匹配“(”；\n\n- \"|\"：或的意思；\n\n- \"/g\"：全局搜索。由于此处要去除字符串中所有中括号，因此正则中要开启全局搜索；\n\n- \".\"：表示除换行符和其他 Unicode 行终止符之外的任意字符；\n\n- \"*\"：匹配前面的子表达式零次或多次。例如，zo*能匹配“z”以及“zoo”。\\*等价于{0,}；\n\n- \"?\"：匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“does”或“does”中的“do”。?等价于{0,1}。（贪婪模式）\n","slug":"js去除中括号","published":1,"updated":"2023-08-13T06:43:05.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll9eg18f00014i2v4yrhcav0","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;这是一个字符串[html]语句;[html]字符串很常见&#x27;</span>;&lt;br&gt;</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\[|]/g</span>,<span class=\"string\">&#x27;&#x27;</span>));<span class=\"comment\">//移除字符串中的所有[]括号（不包括其内容）</span></span><br><span class=\"line\"><span class=\"comment\">//输出：这是一个字符串html语句;html字符串很常见&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\[.*?\\]/g</span>,<span class=\"string\">&#x27;&#x27;</span>));<span class=\"comment\">//移除字符串中的所有[]括号（包括其内容）</span></span><br><span class=\"line\"><span class=\"comment\">//输出：这是一个字符串语句;字符串很常见</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"移除所有中括号-不包括其内容\"><a href=\"#移除所有中括号-不包括其内容\" class=\"headerlink\" title=\"移除所有中括号,不包括其内容\"></a>移除所有中括号,不包括其内容</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;[1,2,3,4,5,6,7,8]&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newStr = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\[|]/g</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newStr) <span class=\"comment\">//1,2,3,4,5,6,7,8</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"移除所有中括号-包括其内容\"><a href=\"#移除所有中括号-包括其内容\" class=\"headerlink\" title=\"移除所有中括号,包括其内容\"></a>移除所有中括号,包括其内容</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;[1,2,3,4,5,6,7,8]&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newStr = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\[.*?\\]/g</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newStr) <span class=\"comment\">//&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"正则表达式符号释义\"><a href=\"#正则表达式符号释义\" class=\"headerlink\" title=\"正则表达式符号释义\"></a>正则表达式符号释义</h3><ul>\n<li><p>“&quot;：将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配一个换行符。串行“\\”匹配“\\”而“(”则匹配“(”；</p>\n</li>\n<li><p>“|”：或的意思；</p>\n</li>\n<li><p>“&#x2F;g”：全局搜索。由于此处要去除字符串中所有中括号，因此正则中要开启全局搜索；</p>\n</li>\n<li><p>“.”：表示除换行符和其他 Unicode 行终止符之外的任意字符；</p>\n</li>\n<li><p>“<em>“：匹配前面的子表达式零次或多次。例如，zo</em>能匹配“z”以及“zoo”。*等价于{0,}；</p>\n</li>\n<li><p>“?”：匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“does”或“does”中的“do”。?等价于{0,1}。（贪婪模式）</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;这是一个字符串[html]语句;[html]字符串很常见&#x27;</span>;&lt;br&gt;</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\[|]/g</span>,<span class=\"string\">&#x27;&#x27;</span>));<span class=\"comment\">//移除字符串中的所有[]括号（不包括其内容）</span></span><br><span class=\"line\"><span class=\"comment\">//输出：这是一个字符串html语句;html字符串很常见&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\[.*?\\]/g</span>,<span class=\"string\">&#x27;&#x27;</span>));<span class=\"comment\">//移除字符串中的所有[]括号（包括其内容）</span></span><br><span class=\"line\"><span class=\"comment\">//输出：这是一个字符串语句;字符串很常见</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"移除所有中括号-不包括其内容\"><a href=\"#移除所有中括号-不包括其内容\" class=\"headerlink\" title=\"移除所有中括号,不包括其内容\"></a>移除所有中括号,不包括其内容</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;[1,2,3,4,5,6,7,8]&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newStr = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\[|]/g</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newStr) <span class=\"comment\">//1,2,3,4,5,6,7,8</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"移除所有中括号-包括其内容\"><a href=\"#移除所有中括号-包括其内容\" class=\"headerlink\" title=\"移除所有中括号,包括其内容\"></a>移除所有中括号,包括其内容</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;[1,2,3,4,5,6,7,8]&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newStr = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\[.*?\\]/g</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newStr) <span class=\"comment\">//&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>","more":"<h3 id=\"正则表达式符号释义\"><a href=\"#正则表达式符号释义\" class=\"headerlink\" title=\"正则表达式符号释义\"></a>正则表达式符号释义</h3><ul>\n<li><p>“&quot;：将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配一个换行符。串行“\\”匹配“\\”而“(”则匹配“(”；</p>\n</li>\n<li><p>“|”：或的意思；</p>\n</li>\n<li><p>“&#x2F;g”：全局搜索。由于此处要去除字符串中所有中括号，因此正则中要开启全局搜索；</p>\n</li>\n<li><p>“.”：表示除换行符和其他 Unicode 行终止符之外的任意字符；</p>\n</li>\n<li><p>“<em>“：匹配前面的子表达式零次或多次。例如，zo</em>能匹配“z”以及“zoo”。*等价于{0,}；</p>\n</li>\n<li><p>“?”：匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“does”或“does”中的“do”。?等价于{0,1}。（贪婪模式）</p>\n</li>\n</ul>"},{"title":"【ES6学习笔记】之 变量","date":"2023-08-13T06:16:23.737Z","_content":"\n# 概览\n\nES6 新增了两个定义变量的关键字：`let` 与 `const`，它们几乎取代了 ES5 定义变量的方式：`var`。`let`是新的`var`,`const`简单的常量声明。\n\n```javascript\nfunction f() {\n  {\n    let x\n    {\n      // okay, block scoped name\n      const x = 'sneaky'\n      // error, const\n      x = 'foo'\n    }\n    // error, already declared in block\n    let x = 'inner'\n  }\n}\n```\n\nES6 之前变量之前存在两个问题：\n\n- JS 没有块级作用域。在 JS 函数中的 var 声明，其作用域是函数体的全部。\n- 循环内变量过度共享\n\n# 块级作用域\n\n`let`,`const`创建的变量都是**块级作用域**：它们只存在包围它们的最深代码块中。\n\n作用域有哪些？\n\n- 块级作用域\n- 函数作用域\n- 全局作用域\n\n```javascript\nfunction func() {\n  if (true) {\n    let tmp = 123\n    // const tmp = 123;\n  }\n  console.log(tmp) // ReferenceError: tmp is not defined\n}\nconsole.log(tmp) // ReferenceError: tmp is not defined\n```\n\n相比之下，`var`声明的是函数域。\n\n```javascript\nfunction func() {\n  if (true) {\n    var tmp = 123\n  }\n  console.log(tmp) // 123\n}\nfunc()\nconsole.log(tmp) // tmp is not defined\n```\n\n下面的式子更难看出函数作用域与块级作用域的区别\n\n```javascript\nfunction myFunc() {\n  var number1 = 15 // 函数作用域\n  if (true) {\n    let number1 = 20 // 块级作用域\n    console.log(number1) // 20\n  }\n  console.log(number1) // 15\n}\nmyFunc()\nconsole.log(number1) // number1 is not defined\n```\n\n而全局作用域，可以从 JavaScript 程序中的任何位置访问。\n\n```javascript\nvar number1 = 15\nconsole.log(window.number1, globalThis.number1, window === globalThis) // 15 15 true\n```\n\n**面试题：循环中定时器闭包**\n\n```javascript\nfor (var i = 0; i < 5; i++) {\n  setTimeout(() => {\n    console.log(i) //5, 5, 5, 5, 5\n  }, 0)\n}\nconsole.log(i) //5 i跳出循环体污染外部函数\n\n//将var改成let之后\nfor (let i = 0; i < 5; i++) {\n  setTimeout(() => {\n    console.log(i) // 0,1,2,3,4\n  }, 0)\n}\nconsole.log(i) //i is not defined i无法污染外部函数\n```\n\n在 for 循环中使用 var 声明的循环变量，会跳出循环体污染当前的函数。\n\n# TDZ\n\n> `let`、`const`暂时性死区（temporal dead zone）\n\n`let`,`const`声明的变量拥有**暂时性死区**：当进入它的作用域，它不能被访问（获取或设置）直到执行到达声明。  \n简单描述：\n\n```javascript\nif (true) {\n  //这块区域是TDZ\n  console.log(a) // Uncaught ReferenceError: Cannot access 'a' before initialization\n  let a = 1\n  // const a = 1\n}\n```\n\n```javascript\nif (true) {\n  // enter new scope, TDZ starts\n  // Uninitialized binding for `tmp` is created\n\n  tmp = 'abc' // ReferenceError\n  console.log(tmp) // ReferenceError\n\n  let tmp // TDZ ends, `tmp` is initialized with `undefined`\n  console.log(tmp) // undefined\n\n  tmp = 123\n  console.log(tmp) // 123\n}\n```\n\n下面示例将演示死区（dead zone）是真正短暂时间的（基于时间）和不受空间条件限制（基于位置）\n\n```javascript\nif (true) {\n  // enter new scope, TDZ starts\n  const func = function () {\n    console.log(myVar) // OK!\n  }\n\n  // Here we are within the TDZ and\n  // accessing `myVar` would cause a `ReferenceError`\n\n  let myVar = 3 // TDZ ends\n  func() // called outside TDZ\n}\n```\n\n上面的例子我们可以清楚的看到 let myVar 变量被定义了，但是不像 var 一样被提升。那它初始化了吗？没有，这就是 TDZ 在进入块级作用域就存在的原因。基本上，当 let myVar 将被定义时，它将进入 TDZ，并在您声明和初始化它时结束。所以在范围中，它将首先在 TDZ 中，但是一旦到达声明部分，TDZ 就会结束。\n\n#### 为什么会存在 TDZ?\n\n- 它帮助我们发现错误。\n- 在声明变量之前尝试访问它是错误的方式。\n\n> 为避免 TDZ，请始终确保在任何范围的顶部定义 let 和 const。\n\n我们可以通过分解来简单地理解这个术语。时间意味着暂时的东西，死亡意味着没有生命的状态，编程世界中与内存相关的区域。所以变量暂时不可用（或死亡）的时区在 TDZ 中。\n\n或者简单地说，进入块级作用域与其变量创建声明之间的时间跨度称为时间死区。\n\n# 变量提升\n\n> `var`变量提升\n\nJavaScript 中，我们通常说的作用域是函数作用域，使用 var 声明的变量，无论是在代码的哪个地方声明的，都会提升到当前作用域的最顶部，这种行为叫做**变量提升（Hoisting）**\n\n下面代码，演示了函数的变量提升：\n\n```javascript\n{\n  // Enter a new scope\n\n  console.log(foo()) // hello, due to hoisting\n  function foo() {\n    return 'hello'\n  }\n}\n```\n\n也就是说，如果在函数内部声明的变量，都会被提升到函数开头，而在全局的声明，就会提升到全局作用域的顶部。\n\n```javascript\nfunction test() {\n  console.log('1: ', a) //undefined\n  if (false) {\n    var a = 1\n  }\n  console.log('3: ', a) //undefined\n}\n\ntest()\n```\n\n实际执行时，上面的代码中的变量 a 会提升到函数顶部声明，即使 if 语句的条件是 false，也一样不影响 a 的提升。\n\n```javascript\nfunction test() {\n  var a\n  //a声明没有赋值\n  console.log('1: ', a) //undefined\n  if (false) {\n    a = 1\n  }\n  //a声明没有赋值\n  console.log('3: ', a) //undefined\n}\n```\n\n在嵌套函数的情况，变量只会提升到最近一个函数的顶部，而不会到外部函数。\n\n```javascript\n//b提升到函数a顶部，但不会提升到函数test。\nfunction test() {\n  function a() {\n    if (false) {\n      var b = 2\n    }\n  }\n  console.log('b: ', b)\n}\n\ntest() //b is not defined\n```\n\n# 不允许重复声明\n\n> `let`不允许重复声明\n\n`let`不允许在相同作用域内，重复声明同一个变量。\n\n```javascript\n// 报错\nfunction func() {\n  let a = 10\n  var a = 1\n}\n\n// 报错\nfunction func() {\n  let a = 10\n  let a = 1\n}\n```\n\n因此在函数内部不能重新声明函数\n\n```javascript\nfunction func(arg) {\n  let arg\n}\nfunc() // 报错 Identifier 'arg' has already been declared\n\nfunction func(arg) {\n  {\n    let arg\n  }\n}\nfunc() // 不报错\n```\n\n# const 命令\n\n> const 声明一个只读的常量。一旦声明，常量的值就不能改变。\n\n一般使用场景：\n\n```javascript\nconst start = 'hi all'\n\nconst getName = () => {\n  return 'jelly'\n}\n\nconst conf = {\n  fav: 'Coding',\n}\n\n// 模板\nconst msg = `${start}, my name is ${getName()}, ${conf.fav} is my favourite`\n```\n\n你可能不知道的事：\n\n```javascript\n// 1. 与引号混用\nconst wantToSay = `I'm a \"tbfed\"`\n\n// 2. 支持多行文本\nconst slogan = `\nI have a dream today!\n`\n\n// 比较适合写HTML\nconst resultTpl = `\n  <section>\n    <div>...</div>\n  </section>\n`\n```\n\n> 在 JavaScript 中，const 仅表示绑定（变量名和变量值之间的关联）是不可变的。值本身可能是可变的，如以下示例中的 obj。\n\n```javascript\nconst obj = { prop: 0 }\nobj.prop = obj.prop + 1\nconsole.log(obj.prop) // 1\n```\n\n# 全局变量和全局对象\n\n在 Web 浏览器中，唯一直接位于该范围内的位置是脚本的顶层。全局范围的变量称为全局变量，可以随处访问。有两种全局变量：\n\n- 全局声明变量是普通变量。\n  它们只能在脚本的顶层通过 const、let 和类声明创建。\n- 全局对象变量被存储在所谓全局对象的属性中。\n  它们是在脚本的顶层通过 var 和函数声明创建的。\n  可以通过全局变量 globalThis 访问全局对象，它可以用来创建、读取和删除全局对象变量。\n  除此之外，全局对象变量像普通变量一样工作。\n\n```javascript\nwindow === globalThis // true\n\nconsole.log(window.a) // 1\nvar a = 1\nconsole.log(window.a) // 1\n```\n\n# 区别\n\n`var`、`let`和`const`是 JavaScript 用来存储和声明变量的特殊关键字。它们每个都有唯一性（差异），将简要讨论。\n\n- **相同点**：`var`,`let`,`const`声明的变量，是不能被`delete`的;\n- **区别**：\n\n`var`:\n\n- var 分别具有全局和函数作用域，也就是说，定义在函数外部的变量可以全局访问，定义在特定函数内部的变量只能在函数内部访问。\n- 其次，用户可以使用 var 重新声明变量，用户可以更新 var 变量。\n- 如果用户在声明之前使用 var 变量，它会使用未定义的值进行初始化，值为 undefined。\n\n`let`:\n\n- let 变量的作用域仅为块作用域。它不能在特定功能块之外访问，let 关键字是 var 关键字的改进版本。\n- 用户不能重新声明使用 let 关键字定义的变量，但可以更新它。\n- 用户可以使用 let 关键字在不同的功能块中声明同名变量。\n- 无需初始化即可声明。\n\n`const`:\n\n- const 变量的作用域是块作用域。\n- 它不能更新或重新声明到范围内\n- 没有初始化就不能声明\n\n**变量提升**：`var`声明的变量存在变量提升，即变量可以在声明之前调用，值为 undefined；  \n`let`,`const`不存在变量提升，即它们声明的变量一定要在声明后使用，否则会报错。\n\n**暂时性死区**：`var`不存在暂时性死区；`let`、`const`存在暂时性死区，只有等声明变量后，才可以获取和使用该变量。\n\n**重复声明**：`var`允许重复声明；`lat`、`const`在同一作用域不允许重复声明。\n\n**修改声明的变量**：`var`和`let`可以修改声明的变量；`const`声明一个只读常量，一旦声明，常量的值就不能改变。\n\n# 面试题\n\n### 1.请问 var、let 和 const 有何区别？\n\n**作用域不同：**\n\nvar 声明的变量的作用域是当前执行上下文，或者说对于声明在任何函数外的变量来说是全局的\n\nlet 、 const 声明的是块级作用域变量，只在它所在的代码块内有效\n\n**变量提升现象：**\n\nvar 声明的变量会被提升到作用域顶部，并初始化为 undefined\n\nlet、 const 声明的变量会被提升到顶部，但在声明代码前不能使用（暂时性死区），会被初始化 undefined\n\n**变量/常量：**\n\nvar 和 let 声明变量，const 声明只读常量\n\n**暂时性死区：**\n\nvar 可以先使用，后声明，值为 undefined\n\nlet 、const 必须先声明，后使用；且 const 必须初始化赋值\n\n在 let、const 声明之前就访问对应的变量与常量，会抛出 ReferenceError，产生原因：\n\n由 let/const 声明的变量，当它们包含的词法环境(Lexical Environment)被实例化时会被创建，但只有在变量的词法绑定(LexicalBinding)已经被求值运算后，才能够被访问（摘自 ES2015 语言标准）\n\n简单来说：用 let/const 声明的变量会先在作用域中被创建出来，但此时还未进行词法绑定，是不能被访问的，会抛出错误。**从在作用域创建变量开始，到变量开始可被访问之间的一段时间，称之为 TDZ(暂时性死区)**\n\n### 2.const 声明的变量是绝对的不可变吗？\n\n实际上，不是 const 变量的值不得改动，而是变量指向的那个内存地址不得改动。对于基础类型数据，值保存在变量指向的那个内存地址，等同于常量\n\n对于复合类型数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const 只能保证这个指针是不变的，至于它指向的数据结构是否变化，是不可控的。\n\n例如 const 定义一个对象，对象的属性的值是可变的。\n\n**原文地址** [第一章 变量](https://github.com/yihan12/build-up_ES6-ES12/blob/main/variable/README.md)  \n**下一章**：[第二章 模板字符串、字符串新特性](https://github.com/yihan12/build-up_ES6/blob/main/strings/README.md)\n","source":"_posts/ES6学习笔记/【ES6学习笔记】之 变量.md","raw":"---\ntitle: 【ES6学习笔记】之 变量\ndate:\ntags: [JavaScript, ES6]\ncategories: [前端, ES6, 变量]\n---\n\n# 概览\n\nES6 新增了两个定义变量的关键字：`let` 与 `const`，它们几乎取代了 ES5 定义变量的方式：`var`。`let`是新的`var`,`const`简单的常量声明。\n\n```javascript\nfunction f() {\n  {\n    let x\n    {\n      // okay, block scoped name\n      const x = 'sneaky'\n      // error, const\n      x = 'foo'\n    }\n    // error, already declared in block\n    let x = 'inner'\n  }\n}\n```\n\nES6 之前变量之前存在两个问题：\n\n- JS 没有块级作用域。在 JS 函数中的 var 声明，其作用域是函数体的全部。\n- 循环内变量过度共享\n\n# 块级作用域\n\n`let`,`const`创建的变量都是**块级作用域**：它们只存在包围它们的最深代码块中。\n\n作用域有哪些？\n\n- 块级作用域\n- 函数作用域\n- 全局作用域\n\n```javascript\nfunction func() {\n  if (true) {\n    let tmp = 123\n    // const tmp = 123;\n  }\n  console.log(tmp) // ReferenceError: tmp is not defined\n}\nconsole.log(tmp) // ReferenceError: tmp is not defined\n```\n\n相比之下，`var`声明的是函数域。\n\n```javascript\nfunction func() {\n  if (true) {\n    var tmp = 123\n  }\n  console.log(tmp) // 123\n}\nfunc()\nconsole.log(tmp) // tmp is not defined\n```\n\n下面的式子更难看出函数作用域与块级作用域的区别\n\n```javascript\nfunction myFunc() {\n  var number1 = 15 // 函数作用域\n  if (true) {\n    let number1 = 20 // 块级作用域\n    console.log(number1) // 20\n  }\n  console.log(number1) // 15\n}\nmyFunc()\nconsole.log(number1) // number1 is not defined\n```\n\n而全局作用域，可以从 JavaScript 程序中的任何位置访问。\n\n```javascript\nvar number1 = 15\nconsole.log(window.number1, globalThis.number1, window === globalThis) // 15 15 true\n```\n\n**面试题：循环中定时器闭包**\n\n```javascript\nfor (var i = 0; i < 5; i++) {\n  setTimeout(() => {\n    console.log(i) //5, 5, 5, 5, 5\n  }, 0)\n}\nconsole.log(i) //5 i跳出循环体污染外部函数\n\n//将var改成let之后\nfor (let i = 0; i < 5; i++) {\n  setTimeout(() => {\n    console.log(i) // 0,1,2,3,4\n  }, 0)\n}\nconsole.log(i) //i is not defined i无法污染外部函数\n```\n\n在 for 循环中使用 var 声明的循环变量，会跳出循环体污染当前的函数。\n\n# TDZ\n\n> `let`、`const`暂时性死区（temporal dead zone）\n\n`let`,`const`声明的变量拥有**暂时性死区**：当进入它的作用域，它不能被访问（获取或设置）直到执行到达声明。  \n简单描述：\n\n```javascript\nif (true) {\n  //这块区域是TDZ\n  console.log(a) // Uncaught ReferenceError: Cannot access 'a' before initialization\n  let a = 1\n  // const a = 1\n}\n```\n\n```javascript\nif (true) {\n  // enter new scope, TDZ starts\n  // Uninitialized binding for `tmp` is created\n\n  tmp = 'abc' // ReferenceError\n  console.log(tmp) // ReferenceError\n\n  let tmp // TDZ ends, `tmp` is initialized with `undefined`\n  console.log(tmp) // undefined\n\n  tmp = 123\n  console.log(tmp) // 123\n}\n```\n\n下面示例将演示死区（dead zone）是真正短暂时间的（基于时间）和不受空间条件限制（基于位置）\n\n```javascript\nif (true) {\n  // enter new scope, TDZ starts\n  const func = function () {\n    console.log(myVar) // OK!\n  }\n\n  // Here we are within the TDZ and\n  // accessing `myVar` would cause a `ReferenceError`\n\n  let myVar = 3 // TDZ ends\n  func() // called outside TDZ\n}\n```\n\n上面的例子我们可以清楚的看到 let myVar 变量被定义了，但是不像 var 一样被提升。那它初始化了吗？没有，这就是 TDZ 在进入块级作用域就存在的原因。基本上，当 let myVar 将被定义时，它将进入 TDZ，并在您声明和初始化它时结束。所以在范围中，它将首先在 TDZ 中，但是一旦到达声明部分，TDZ 就会结束。\n\n#### 为什么会存在 TDZ?\n\n- 它帮助我们发现错误。\n- 在声明变量之前尝试访问它是错误的方式。\n\n> 为避免 TDZ，请始终确保在任何范围的顶部定义 let 和 const。\n\n我们可以通过分解来简单地理解这个术语。时间意味着暂时的东西，死亡意味着没有生命的状态，编程世界中与内存相关的区域。所以变量暂时不可用（或死亡）的时区在 TDZ 中。\n\n或者简单地说，进入块级作用域与其变量创建声明之间的时间跨度称为时间死区。\n\n# 变量提升\n\n> `var`变量提升\n\nJavaScript 中，我们通常说的作用域是函数作用域，使用 var 声明的变量，无论是在代码的哪个地方声明的，都会提升到当前作用域的最顶部，这种行为叫做**变量提升（Hoisting）**\n\n下面代码，演示了函数的变量提升：\n\n```javascript\n{\n  // Enter a new scope\n\n  console.log(foo()) // hello, due to hoisting\n  function foo() {\n    return 'hello'\n  }\n}\n```\n\n也就是说，如果在函数内部声明的变量，都会被提升到函数开头，而在全局的声明，就会提升到全局作用域的顶部。\n\n```javascript\nfunction test() {\n  console.log('1: ', a) //undefined\n  if (false) {\n    var a = 1\n  }\n  console.log('3: ', a) //undefined\n}\n\ntest()\n```\n\n实际执行时，上面的代码中的变量 a 会提升到函数顶部声明，即使 if 语句的条件是 false，也一样不影响 a 的提升。\n\n```javascript\nfunction test() {\n  var a\n  //a声明没有赋值\n  console.log('1: ', a) //undefined\n  if (false) {\n    a = 1\n  }\n  //a声明没有赋值\n  console.log('3: ', a) //undefined\n}\n```\n\n在嵌套函数的情况，变量只会提升到最近一个函数的顶部，而不会到外部函数。\n\n```javascript\n//b提升到函数a顶部，但不会提升到函数test。\nfunction test() {\n  function a() {\n    if (false) {\n      var b = 2\n    }\n  }\n  console.log('b: ', b)\n}\n\ntest() //b is not defined\n```\n\n# 不允许重复声明\n\n> `let`不允许重复声明\n\n`let`不允许在相同作用域内，重复声明同一个变量。\n\n```javascript\n// 报错\nfunction func() {\n  let a = 10\n  var a = 1\n}\n\n// 报错\nfunction func() {\n  let a = 10\n  let a = 1\n}\n```\n\n因此在函数内部不能重新声明函数\n\n```javascript\nfunction func(arg) {\n  let arg\n}\nfunc() // 报错 Identifier 'arg' has already been declared\n\nfunction func(arg) {\n  {\n    let arg\n  }\n}\nfunc() // 不报错\n```\n\n# const 命令\n\n> const 声明一个只读的常量。一旦声明，常量的值就不能改变。\n\n一般使用场景：\n\n```javascript\nconst start = 'hi all'\n\nconst getName = () => {\n  return 'jelly'\n}\n\nconst conf = {\n  fav: 'Coding',\n}\n\n// 模板\nconst msg = `${start}, my name is ${getName()}, ${conf.fav} is my favourite`\n```\n\n你可能不知道的事：\n\n```javascript\n// 1. 与引号混用\nconst wantToSay = `I'm a \"tbfed\"`\n\n// 2. 支持多行文本\nconst slogan = `\nI have a dream today!\n`\n\n// 比较适合写HTML\nconst resultTpl = `\n  <section>\n    <div>...</div>\n  </section>\n`\n```\n\n> 在 JavaScript 中，const 仅表示绑定（变量名和变量值之间的关联）是不可变的。值本身可能是可变的，如以下示例中的 obj。\n\n```javascript\nconst obj = { prop: 0 }\nobj.prop = obj.prop + 1\nconsole.log(obj.prop) // 1\n```\n\n# 全局变量和全局对象\n\n在 Web 浏览器中，唯一直接位于该范围内的位置是脚本的顶层。全局范围的变量称为全局变量，可以随处访问。有两种全局变量：\n\n- 全局声明变量是普通变量。\n  它们只能在脚本的顶层通过 const、let 和类声明创建。\n- 全局对象变量被存储在所谓全局对象的属性中。\n  它们是在脚本的顶层通过 var 和函数声明创建的。\n  可以通过全局变量 globalThis 访问全局对象，它可以用来创建、读取和删除全局对象变量。\n  除此之外，全局对象变量像普通变量一样工作。\n\n```javascript\nwindow === globalThis // true\n\nconsole.log(window.a) // 1\nvar a = 1\nconsole.log(window.a) // 1\n```\n\n# 区别\n\n`var`、`let`和`const`是 JavaScript 用来存储和声明变量的特殊关键字。它们每个都有唯一性（差异），将简要讨论。\n\n- **相同点**：`var`,`let`,`const`声明的变量，是不能被`delete`的;\n- **区别**：\n\n`var`:\n\n- var 分别具有全局和函数作用域，也就是说，定义在函数外部的变量可以全局访问，定义在特定函数内部的变量只能在函数内部访问。\n- 其次，用户可以使用 var 重新声明变量，用户可以更新 var 变量。\n- 如果用户在声明之前使用 var 变量，它会使用未定义的值进行初始化，值为 undefined。\n\n`let`:\n\n- let 变量的作用域仅为块作用域。它不能在特定功能块之外访问，let 关键字是 var 关键字的改进版本。\n- 用户不能重新声明使用 let 关键字定义的变量，但可以更新它。\n- 用户可以使用 let 关键字在不同的功能块中声明同名变量。\n- 无需初始化即可声明。\n\n`const`:\n\n- const 变量的作用域是块作用域。\n- 它不能更新或重新声明到范围内\n- 没有初始化就不能声明\n\n**变量提升**：`var`声明的变量存在变量提升，即变量可以在声明之前调用，值为 undefined；  \n`let`,`const`不存在变量提升，即它们声明的变量一定要在声明后使用，否则会报错。\n\n**暂时性死区**：`var`不存在暂时性死区；`let`、`const`存在暂时性死区，只有等声明变量后，才可以获取和使用该变量。\n\n**重复声明**：`var`允许重复声明；`lat`、`const`在同一作用域不允许重复声明。\n\n**修改声明的变量**：`var`和`let`可以修改声明的变量；`const`声明一个只读常量，一旦声明，常量的值就不能改变。\n\n# 面试题\n\n### 1.请问 var、let 和 const 有何区别？\n\n**作用域不同：**\n\nvar 声明的变量的作用域是当前执行上下文，或者说对于声明在任何函数外的变量来说是全局的\n\nlet 、 const 声明的是块级作用域变量，只在它所在的代码块内有效\n\n**变量提升现象：**\n\nvar 声明的变量会被提升到作用域顶部，并初始化为 undefined\n\nlet、 const 声明的变量会被提升到顶部，但在声明代码前不能使用（暂时性死区），会被初始化 undefined\n\n**变量/常量：**\n\nvar 和 let 声明变量，const 声明只读常量\n\n**暂时性死区：**\n\nvar 可以先使用，后声明，值为 undefined\n\nlet 、const 必须先声明，后使用；且 const 必须初始化赋值\n\n在 let、const 声明之前就访问对应的变量与常量，会抛出 ReferenceError，产生原因：\n\n由 let/const 声明的变量，当它们包含的词法环境(Lexical Environment)被实例化时会被创建，但只有在变量的词法绑定(LexicalBinding)已经被求值运算后，才能够被访问（摘自 ES2015 语言标准）\n\n简单来说：用 let/const 声明的变量会先在作用域中被创建出来，但此时还未进行词法绑定，是不能被访问的，会抛出错误。**从在作用域创建变量开始，到变量开始可被访问之间的一段时间，称之为 TDZ(暂时性死区)**\n\n### 2.const 声明的变量是绝对的不可变吗？\n\n实际上，不是 const 变量的值不得改动，而是变量指向的那个内存地址不得改动。对于基础类型数据，值保存在变量指向的那个内存地址，等同于常量\n\n对于复合类型数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const 只能保证这个指针是不变的，至于它指向的数据结构是否变化，是不可控的。\n\n例如 const 定义一个对象，对象的属性的值是可变的。\n\n**原文地址** [第一章 变量](https://github.com/yihan12/build-up_ES6-ES12/blob/main/variable/README.md)  \n**下一章**：[第二章 模板字符串、字符串新特性](https://github.com/yihan12/build-up_ES6/blob/main/strings/README.md)\n","slug":"ES6学习笔记/【ES6学习笔记】之 变量","published":1,"updated":"2023-08-13T06:43:48.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll9eg18h00034i2veqeufxug","content":"<h1 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h1><p>ES6 新增了两个定义变量的关键字：<code>let</code> 与 <code>const</code>，它们几乎取代了 ES5 定义变量的方式：<code>var</code>。<code>let</code>是新的<code>var</code>,<code>const</code>简单的常量声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// okay, block scoped name</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> x = <span class=\"string\">&#x27;sneaky&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// error, const</span></span><br><span class=\"line\">      x = <span class=\"string\">&#x27;foo&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// error, already declared in block</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"string\">&#x27;inner&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ES6 之前变量之前存在两个问题：</p>\n<ul>\n<li>JS 没有块级作用域。在 JS 函数中的 var 声明，其作用域是函数体的全部。</li>\n<li>循环内变量过度共享</li>\n</ul>\n<h1 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h1><p><code>let</code>,<code>const</code>创建的变量都是<strong>块级作用域</strong>：它们只存在包围它们的最深代码块中。</p>\n<p>作用域有哪些？</p>\n<ul>\n<li>块级作用域</li>\n<li>函数作用域</li>\n<li>全局作用域</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = <span class=\"number\">123</span></span><br><span class=\"line\">    <span class=\"comment\">// const tmp = 123;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp) <span class=\"comment\">// ReferenceError: tmp is not defined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp) <span class=\"comment\">// ReferenceError: tmp is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>相比之下，<code>var</code>声明的是函数域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp) <span class=\"comment\">// 123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">func</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp) <span class=\"comment\">// tmp is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>下面的式子更难看出函数作用域与块级作用域的区别</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunc</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> number1 = <span class=\"number\">15</span> <span class=\"comment\">// 函数作用域</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> number1 = <span class=\"number\">20</span> <span class=\"comment\">// 块级作用域</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(number1) <span class=\"comment\">// 20</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(number1) <span class=\"comment\">// 15</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">myFunc</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(number1) <span class=\"comment\">// number1 is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>而全局作用域，可以从 JavaScript 程序中的任何位置访问。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> number1 = <span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">number1</span>, globalThis.<span class=\"property\">number1</span>, <span class=\"variable language_\">window</span> === globalThis) <span class=\"comment\">// 15 15 true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>面试题：循环中定时器闭包</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i) <span class=\"comment\">//5, 5, 5, 5, 5</span></span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i) <span class=\"comment\">//5 i跳出循环体污染外部函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将var改成let之后</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i) <span class=\"comment\">// 0,1,2,3,4</span></span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i) <span class=\"comment\">//i is not defined i无法污染外部函数</span></span><br></pre></td></tr></table></figure>\n\n<p>在 for 循环中使用 var 声明的循环变量，会跳出循环体污染当前的函数。</p>\n<h1 id=\"TDZ\"><a href=\"#TDZ\" class=\"headerlink\" title=\"TDZ\"></a>TDZ</h1><blockquote>\n<p><code>let</code>、<code>const</code>暂时性死区（temporal dead zone）</p>\n</blockquote>\n<p><code>let</code>,<code>const</code>声明的变量拥有<strong>暂时性死区</strong>：当进入它的作用域，它不能被访问（获取或设置）直到执行到达声明。<br>简单描述：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//这块区域是TDZ</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a) <span class=\"comment\">// Uncaught ReferenceError: Cannot access &#x27;a&#x27; before initialization</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// const a = 1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// enter new scope, TDZ starts</span></span><br><span class=\"line\">  <span class=\"comment\">// Uninitialized binding for `tmp` is created</span></span><br><span class=\"line\"></span><br><span class=\"line\">  tmp = <span class=\"string\">&#x27;abc&#x27;</span> <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp) <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp <span class=\"comment\">// TDZ ends, `tmp` is initialized with `undefined`</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp) <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  tmp = <span class=\"number\">123</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp) <span class=\"comment\">// 123</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面示例将演示死区（dead zone）是真正短暂时间的（基于时间）和不受空间条件限制（基于位置）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// enter new scope, TDZ starts</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> func = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myVar) <span class=\"comment\">// OK!</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Here we are within the TDZ and</span></span><br><span class=\"line\">  <span class=\"comment\">// accessing `myVar` would cause a `ReferenceError`</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> myVar = <span class=\"number\">3</span> <span class=\"comment\">// TDZ ends</span></span><br><span class=\"line\">  <span class=\"title function_\">func</span>() <span class=\"comment\">// called outside TDZ</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子我们可以清楚的看到 let myVar 变量被定义了，但是不像 var 一样被提升。那它初始化了吗？没有，这就是 TDZ 在进入块级作用域就存在的原因。基本上，当 let myVar 将被定义时，它将进入 TDZ，并在您声明和初始化它时结束。所以在范围中，它将首先在 TDZ 中，但是一旦到达声明部分，TDZ 就会结束。</p>\n<h4 id=\"为什么会存在-TDZ\"><a href=\"#为什么会存在-TDZ\" class=\"headerlink\" title=\"为什么会存在 TDZ?\"></a>为什么会存在 TDZ?</h4><ul>\n<li>它帮助我们发现错误。</li>\n<li>在声明变量之前尝试访问它是错误的方式。</li>\n</ul>\n<blockquote>\n<p>为避免 TDZ，请始终确保在任何范围的顶部定义 let 和 const。</p>\n</blockquote>\n<p>我们可以通过分解来简单地理解这个术语。时间意味着暂时的东西，死亡意味着没有生命的状态，编程世界中与内存相关的区域。所以变量暂时不可用（或死亡）的时区在 TDZ 中。</p>\n<p>或者简单地说，进入块级作用域与其变量创建声明之间的时间跨度称为时间死区。</p>\n<h1 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h1><blockquote>\n<p><code>var</code>变量提升</p>\n</blockquote>\n<p>JavaScript 中，我们通常说的作用域是函数作用域，使用 var 声明的变量，无论是在代码的哪个地方声明的，都会提升到当前作用域的最顶部，这种行为叫做<strong>变量提升（Hoisting）</strong></p>\n<p>下面代码，演示了函数的变量提升：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Enter a new scope</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">foo</span>()) <span class=\"comment\">// hello, due to hoisting</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，如果在函数内部声明的变量，都会被提升到函数开头，而在全局的声明，就会提升到全局作用域的顶部。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1: &#x27;</span>, a) <span class=\"comment\">//undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3: &#x27;</span>, a) <span class=\"comment\">//undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>()</span><br></pre></td></tr></table></figure>\n\n<p>实际执行时，上面的代码中的变量 a 会提升到函数顶部声明，即使 if 语句的条件是 false，也一样不影响 a 的提升。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a</span><br><span class=\"line\">  <span class=\"comment\">//a声明没有赋值</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1: &#x27;</span>, a) <span class=\"comment\">//undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//a声明没有赋值</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3: &#x27;</span>, a) <span class=\"comment\">//undefined</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在嵌套函数的情况，变量只会提升到最近一个函数的顶部，而不会到外部函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//b提升到函数a顶部，但不会提升到函数test。</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> b = <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b: &#x27;</span>, b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>() <span class=\"comment\">//b is not defined</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h1><blockquote>\n<p><code>let</code>不允许重复声明</p>\n</blockquote>\n<p><code>let</code>不允许在相同作用域内，重复声明同一个变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此在函数内部不能重新声明函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">arg</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">func</span>() <span class=\"comment\">// 报错 Identifier &#x27;arg&#x27; has already been declared</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">arg</span>) &#123;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arg</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">func</span>() <span class=\"comment\">// 不报错</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"const-命令\"><a href=\"#const-命令\" class=\"headerlink\" title=\"const 命令\"></a>const 命令</h1><blockquote>\n<p>const 声明一个只读的常量。一旦声明，常量的值就不能改变。</p>\n</blockquote>\n<p>一般使用场景：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> start = <span class=\"string\">&#x27;hi all&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getName</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;jelly&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> conf = &#123;</span><br><span class=\"line\">  <span class=\"attr\">fav</span>: <span class=\"string\">&#x27;Coding&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模板</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> msg = <span class=\"string\">`<span class=\"subst\">$&#123;start&#125;</span>, my name is <span class=\"subst\">$&#123;getName()&#125;</span>, <span class=\"subst\">$&#123;conf.fav&#125;</span> is my favourite`</span></span><br></pre></td></tr></table></figure>\n\n<p>你可能不知道的事：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 与引号混用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> wantToSay = <span class=\"string\">`I&#x27;m a &quot;tbfed&quot;`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 支持多行文本</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> slogan = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">I have a dream today!</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 比较适合写HTML</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> resultTpl = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;section&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;...&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/section&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在 JavaScript 中，const 仅表示绑定（变量名和变量值之间的关联）是不可变的。值本身可能是可变的，如以下示例中的 obj。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">prop</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">obj.<span class=\"property\">prop</span> = obj.<span class=\"property\">prop</span> + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">prop</span>) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"全局变量和全局对象\"><a href=\"#全局变量和全局对象\" class=\"headerlink\" title=\"全局变量和全局对象\"></a>全局变量和全局对象</h1><p>在 Web 浏览器中，唯一直接位于该范围内的位置是脚本的顶层。全局范围的变量称为全局变量，可以随处访问。有两种全局变量：</p>\n<ul>\n<li>全局声明变量是普通变量。<br>它们只能在脚本的顶层通过 const、let 和类声明创建。</li>\n<li>全局对象变量被存储在所谓全局对象的属性中。<br>它们是在脚本的顶层通过 var 和函数声明创建的。<br>可以通过全局变量 globalThis 访问全局对象，它可以用来创建、读取和删除全局对象变量。<br>除此之外，全局对象变量像普通变量一样工作。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span> === globalThis <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">a</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">a</span>) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h1><p><code>var</code>、<code>let</code>和<code>const</code>是 JavaScript 用来存储和声明变量的特殊关键字。它们每个都有唯一性（差异），将简要讨论。</p>\n<ul>\n<li><strong>相同点</strong>：<code>var</code>,<code>let</code>,<code>const</code>声明的变量，是不能被<code>delete</code>的;</li>\n<li><strong>区别</strong>：</li>\n</ul>\n<p><code>var</code>:</p>\n<ul>\n<li>var 分别具有全局和函数作用域，也就是说，定义在函数外部的变量可以全局访问，定义在特定函数内部的变量只能在函数内部访问。</li>\n<li>其次，用户可以使用 var 重新声明变量，用户可以更新 var 变量。</li>\n<li>如果用户在声明之前使用 var 变量，它会使用未定义的值进行初始化，值为 undefined。</li>\n</ul>\n<p><code>let</code>:</p>\n<ul>\n<li>let 变量的作用域仅为块作用域。它不能在特定功能块之外访问，let 关键字是 var 关键字的改进版本。</li>\n<li>用户不能重新声明使用 let 关键字定义的变量，但可以更新它。</li>\n<li>用户可以使用 let 关键字在不同的功能块中声明同名变量。</li>\n<li>无需初始化即可声明。</li>\n</ul>\n<p><code>const</code>:</p>\n<ul>\n<li>const 变量的作用域是块作用域。</li>\n<li>它不能更新或重新声明到范围内</li>\n<li>没有初始化就不能声明</li>\n</ul>\n<p><strong>变量提升</strong>：<code>var</code>声明的变量存在变量提升，即变量可以在声明之前调用，值为 undefined；<br><code>let</code>,<code>const</code>不存在变量提升，即它们声明的变量一定要在声明后使用，否则会报错。</p>\n<p><strong>暂时性死区</strong>：<code>var</code>不存在暂时性死区；<code>let</code>、<code>const</code>存在暂时性死区，只有等声明变量后，才可以获取和使用该变量。</p>\n<p><strong>重复声明</strong>：<code>var</code>允许重复声明；<code>lat</code>、<code>const</code>在同一作用域不允许重复声明。</p>\n<p><strong>修改声明的变量</strong>：<code>var</code>和<code>let</code>可以修改声明的变量；<code>const</code>声明一个只读常量，一旦声明，常量的值就不能改变。</p>\n<h1 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h1><h3 id=\"1-请问-var、let-和-const-有何区别？\"><a href=\"#1-请问-var、let-和-const-有何区别？\" class=\"headerlink\" title=\"1.请问 var、let 和 const 有何区别？\"></a>1.请问 var、let 和 const 有何区别？</h3><p><strong>作用域不同：</strong></p>\n<p>var 声明的变量的作用域是当前执行上下文，或者说对于声明在任何函数外的变量来说是全局的</p>\n<p>let 、 const 声明的是块级作用域变量，只在它所在的代码块内有效</p>\n<p><strong>变量提升现象：</strong></p>\n<p>var 声明的变量会被提升到作用域顶部，并初始化为 undefined</p>\n<p>let、 const 声明的变量会被提升到顶部，但在声明代码前不能使用（暂时性死区），会被初始化 undefined</p>\n<p><strong>变量&#x2F;常量：</strong></p>\n<p>var 和 let 声明变量，const 声明只读常量</p>\n<p><strong>暂时性死区：</strong></p>\n<p>var 可以先使用，后声明，值为 undefined</p>\n<p>let 、const 必须先声明，后使用；且 const 必须初始化赋值</p>\n<p>在 let、const 声明之前就访问对应的变量与常量，会抛出 ReferenceError，产生原因：</p>\n<p>由 let&#x2F;const 声明的变量，当它们包含的词法环境(Lexical Environment)被实例化时会被创建，但只有在变量的词法绑定(LexicalBinding)已经被求值运算后，才能够被访问（摘自 ES2015 语言标准）</p>\n<p>简单来说：用 let&#x2F;const 声明的变量会先在作用域中被创建出来，但此时还未进行词法绑定，是不能被访问的，会抛出错误。<strong>从在作用域创建变量开始，到变量开始可被访问之间的一段时间，称之为 TDZ(暂时性死区)</strong></p>\n<h3 id=\"2-const-声明的变量是绝对的不可变吗？\"><a href=\"#2-const-声明的变量是绝对的不可变吗？\" class=\"headerlink\" title=\"2.const 声明的变量是绝对的不可变吗？\"></a>2.const 声明的变量是绝对的不可变吗？</h3><p>实际上，不是 const 变量的值不得改动，而是变量指向的那个内存地址不得改动。对于基础类型数据，值保存在变量指向的那个内存地址，等同于常量</p>\n<p>对于复合类型数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const 只能保证这个指针是不变的，至于它指向的数据结构是否变化，是不可控的。</p>\n<p>例如 const 定义一个对象，对象的属性的值是可变的。</p>\n<p><strong>原文地址</strong> <a href=\"https://github.com/yihan12/build-up_ES6-ES12/blob/main/variable/README.md\">第一章 变量</a><br><strong>下一章</strong>：<a href=\"https://github.com/yihan12/build-up_ES6/blob/main/strings/README.md\">第二章 模板字符串、字符串新特性</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h1><p>ES6 新增了两个定义变量的关键字：<code>let</code> 与 <code>const</code>，它们几乎取代了 ES5 定义变量的方式：<code>var</code>。<code>let</code>是新的<code>var</code>,<code>const</code>简单的常量声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// okay, block scoped name</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> x = <span class=\"string\">&#x27;sneaky&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// error, const</span></span><br><span class=\"line\">      x = <span class=\"string\">&#x27;foo&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// error, already declared in block</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"string\">&#x27;inner&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ES6 之前变量之前存在两个问题：</p>\n<ul>\n<li>JS 没有块级作用域。在 JS 函数中的 var 声明，其作用域是函数体的全部。</li>\n<li>循环内变量过度共享</li>\n</ul>\n<h1 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h1><p><code>let</code>,<code>const</code>创建的变量都是<strong>块级作用域</strong>：它们只存在包围它们的最深代码块中。</p>\n<p>作用域有哪些？</p>\n<ul>\n<li>块级作用域</li>\n<li>函数作用域</li>\n<li>全局作用域</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = <span class=\"number\">123</span></span><br><span class=\"line\">    <span class=\"comment\">// const tmp = 123;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp) <span class=\"comment\">// ReferenceError: tmp is not defined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp) <span class=\"comment\">// ReferenceError: tmp is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>相比之下，<code>var</code>声明的是函数域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp) <span class=\"comment\">// 123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">func</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp) <span class=\"comment\">// tmp is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>下面的式子更难看出函数作用域与块级作用域的区别</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunc</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> number1 = <span class=\"number\">15</span> <span class=\"comment\">// 函数作用域</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> number1 = <span class=\"number\">20</span> <span class=\"comment\">// 块级作用域</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(number1) <span class=\"comment\">// 20</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(number1) <span class=\"comment\">// 15</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">myFunc</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(number1) <span class=\"comment\">// number1 is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>而全局作用域，可以从 JavaScript 程序中的任何位置访问。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> number1 = <span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">number1</span>, globalThis.<span class=\"property\">number1</span>, <span class=\"variable language_\">window</span> === globalThis) <span class=\"comment\">// 15 15 true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>面试题：循环中定时器闭包</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i) <span class=\"comment\">//5, 5, 5, 5, 5</span></span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i) <span class=\"comment\">//5 i跳出循环体污染外部函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将var改成let之后</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i) <span class=\"comment\">// 0,1,2,3,4</span></span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i) <span class=\"comment\">//i is not defined i无法污染外部函数</span></span><br></pre></td></tr></table></figure>\n\n<p>在 for 循环中使用 var 声明的循环变量，会跳出循环体污染当前的函数。</p>\n<h1 id=\"TDZ\"><a href=\"#TDZ\" class=\"headerlink\" title=\"TDZ\"></a>TDZ</h1><blockquote>\n<p><code>let</code>、<code>const</code>暂时性死区（temporal dead zone）</p>\n</blockquote>\n<p><code>let</code>,<code>const</code>声明的变量拥有<strong>暂时性死区</strong>：当进入它的作用域，它不能被访问（获取或设置）直到执行到达声明。<br>简单描述：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//这块区域是TDZ</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a) <span class=\"comment\">// Uncaught ReferenceError: Cannot access &#x27;a&#x27; before initialization</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// const a = 1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// enter new scope, TDZ starts</span></span><br><span class=\"line\">  <span class=\"comment\">// Uninitialized binding for `tmp` is created</span></span><br><span class=\"line\"></span><br><span class=\"line\">  tmp = <span class=\"string\">&#x27;abc&#x27;</span> <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp) <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp <span class=\"comment\">// TDZ ends, `tmp` is initialized with `undefined`</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp) <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  tmp = <span class=\"number\">123</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp) <span class=\"comment\">// 123</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面示例将演示死区（dead zone）是真正短暂时间的（基于时间）和不受空间条件限制（基于位置）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// enter new scope, TDZ starts</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> func = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myVar) <span class=\"comment\">// OK!</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Here we are within the TDZ and</span></span><br><span class=\"line\">  <span class=\"comment\">// accessing `myVar` would cause a `ReferenceError`</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> myVar = <span class=\"number\">3</span> <span class=\"comment\">// TDZ ends</span></span><br><span class=\"line\">  <span class=\"title function_\">func</span>() <span class=\"comment\">// called outside TDZ</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子我们可以清楚的看到 let myVar 变量被定义了，但是不像 var 一样被提升。那它初始化了吗？没有，这就是 TDZ 在进入块级作用域就存在的原因。基本上，当 let myVar 将被定义时，它将进入 TDZ，并在您声明和初始化它时结束。所以在范围中，它将首先在 TDZ 中，但是一旦到达声明部分，TDZ 就会结束。</p>\n<h4 id=\"为什么会存在-TDZ\"><a href=\"#为什么会存在-TDZ\" class=\"headerlink\" title=\"为什么会存在 TDZ?\"></a>为什么会存在 TDZ?</h4><ul>\n<li>它帮助我们发现错误。</li>\n<li>在声明变量之前尝试访问它是错误的方式。</li>\n</ul>\n<blockquote>\n<p>为避免 TDZ，请始终确保在任何范围的顶部定义 let 和 const。</p>\n</blockquote>\n<p>我们可以通过分解来简单地理解这个术语。时间意味着暂时的东西，死亡意味着没有生命的状态，编程世界中与内存相关的区域。所以变量暂时不可用（或死亡）的时区在 TDZ 中。</p>\n<p>或者简单地说，进入块级作用域与其变量创建声明之间的时间跨度称为时间死区。</p>\n<h1 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h1><blockquote>\n<p><code>var</code>变量提升</p>\n</blockquote>\n<p>JavaScript 中，我们通常说的作用域是函数作用域，使用 var 声明的变量，无论是在代码的哪个地方声明的，都会提升到当前作用域的最顶部，这种行为叫做<strong>变量提升（Hoisting）</strong></p>\n<p>下面代码，演示了函数的变量提升：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Enter a new scope</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">foo</span>()) <span class=\"comment\">// hello, due to hoisting</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，如果在函数内部声明的变量，都会被提升到函数开头，而在全局的声明，就会提升到全局作用域的顶部。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1: &#x27;</span>, a) <span class=\"comment\">//undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3: &#x27;</span>, a) <span class=\"comment\">//undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>()</span><br></pre></td></tr></table></figure>\n\n<p>实际执行时，上面的代码中的变量 a 会提升到函数顶部声明，即使 if 语句的条件是 false，也一样不影响 a 的提升。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a</span><br><span class=\"line\">  <span class=\"comment\">//a声明没有赋值</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1: &#x27;</span>, a) <span class=\"comment\">//undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//a声明没有赋值</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3: &#x27;</span>, a) <span class=\"comment\">//undefined</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在嵌套函数的情况，变量只会提升到最近一个函数的顶部，而不会到外部函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//b提升到函数a顶部，但不会提升到函数test。</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> b = <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b: &#x27;</span>, b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>() <span class=\"comment\">//b is not defined</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h1><blockquote>\n<p><code>let</code>不允许重复声明</p>\n</blockquote>\n<p><code>let</code>不允许在相同作用域内，重复声明同一个变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此在函数内部不能重新声明函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">arg</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">func</span>() <span class=\"comment\">// 报错 Identifier &#x27;arg&#x27; has already been declared</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">arg</span>) &#123;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arg</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">func</span>() <span class=\"comment\">// 不报错</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"const-命令\"><a href=\"#const-命令\" class=\"headerlink\" title=\"const 命令\"></a>const 命令</h1><blockquote>\n<p>const 声明一个只读的常量。一旦声明，常量的值就不能改变。</p>\n</blockquote>\n<p>一般使用场景：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> start = <span class=\"string\">&#x27;hi all&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getName</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;jelly&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> conf = &#123;</span><br><span class=\"line\">  <span class=\"attr\">fav</span>: <span class=\"string\">&#x27;Coding&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模板</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> msg = <span class=\"string\">`<span class=\"subst\">$&#123;start&#125;</span>, my name is <span class=\"subst\">$&#123;getName()&#125;</span>, <span class=\"subst\">$&#123;conf.fav&#125;</span> is my favourite`</span></span><br></pre></td></tr></table></figure>\n\n<p>你可能不知道的事：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 与引号混用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> wantToSay = <span class=\"string\">`I&#x27;m a &quot;tbfed&quot;`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 支持多行文本</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> slogan = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">I have a dream today!</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 比较适合写HTML</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> resultTpl = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;section&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;...&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/section&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在 JavaScript 中，const 仅表示绑定（变量名和变量值之间的关联）是不可变的。值本身可能是可变的，如以下示例中的 obj。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">prop</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">obj.<span class=\"property\">prop</span> = obj.<span class=\"property\">prop</span> + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">prop</span>) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"全局变量和全局对象\"><a href=\"#全局变量和全局对象\" class=\"headerlink\" title=\"全局变量和全局对象\"></a>全局变量和全局对象</h1><p>在 Web 浏览器中，唯一直接位于该范围内的位置是脚本的顶层。全局范围的变量称为全局变量，可以随处访问。有两种全局变量：</p>\n<ul>\n<li>全局声明变量是普通变量。<br>它们只能在脚本的顶层通过 const、let 和类声明创建。</li>\n<li>全局对象变量被存储在所谓全局对象的属性中。<br>它们是在脚本的顶层通过 var 和函数声明创建的。<br>可以通过全局变量 globalThis 访问全局对象，它可以用来创建、读取和删除全局对象变量。<br>除此之外，全局对象变量像普通变量一样工作。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span> === globalThis <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">a</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">a</span>) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h1><p><code>var</code>、<code>let</code>和<code>const</code>是 JavaScript 用来存储和声明变量的特殊关键字。它们每个都有唯一性（差异），将简要讨论。</p>\n<ul>\n<li><strong>相同点</strong>：<code>var</code>,<code>let</code>,<code>const</code>声明的变量，是不能被<code>delete</code>的;</li>\n<li><strong>区别</strong>：</li>\n</ul>\n<p><code>var</code>:</p>\n<ul>\n<li>var 分别具有全局和函数作用域，也就是说，定义在函数外部的变量可以全局访问，定义在特定函数内部的变量只能在函数内部访问。</li>\n<li>其次，用户可以使用 var 重新声明变量，用户可以更新 var 变量。</li>\n<li>如果用户在声明之前使用 var 变量，它会使用未定义的值进行初始化，值为 undefined。</li>\n</ul>\n<p><code>let</code>:</p>\n<ul>\n<li>let 变量的作用域仅为块作用域。它不能在特定功能块之外访问，let 关键字是 var 关键字的改进版本。</li>\n<li>用户不能重新声明使用 let 关键字定义的变量，但可以更新它。</li>\n<li>用户可以使用 let 关键字在不同的功能块中声明同名变量。</li>\n<li>无需初始化即可声明。</li>\n</ul>\n<p><code>const</code>:</p>\n<ul>\n<li>const 变量的作用域是块作用域。</li>\n<li>它不能更新或重新声明到范围内</li>\n<li>没有初始化就不能声明</li>\n</ul>\n<p><strong>变量提升</strong>：<code>var</code>声明的变量存在变量提升，即变量可以在声明之前调用，值为 undefined；<br><code>let</code>,<code>const</code>不存在变量提升，即它们声明的变量一定要在声明后使用，否则会报错。</p>\n<p><strong>暂时性死区</strong>：<code>var</code>不存在暂时性死区；<code>let</code>、<code>const</code>存在暂时性死区，只有等声明变量后，才可以获取和使用该变量。</p>\n<p><strong>重复声明</strong>：<code>var</code>允许重复声明；<code>lat</code>、<code>const</code>在同一作用域不允许重复声明。</p>\n<p><strong>修改声明的变量</strong>：<code>var</code>和<code>let</code>可以修改声明的变量；<code>const</code>声明一个只读常量，一旦声明，常量的值就不能改变。</p>\n<h1 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h1><h3 id=\"1-请问-var、let-和-const-有何区别？\"><a href=\"#1-请问-var、let-和-const-有何区别？\" class=\"headerlink\" title=\"1.请问 var、let 和 const 有何区别？\"></a>1.请问 var、let 和 const 有何区别？</h3><p><strong>作用域不同：</strong></p>\n<p>var 声明的变量的作用域是当前执行上下文，或者说对于声明在任何函数外的变量来说是全局的</p>\n<p>let 、 const 声明的是块级作用域变量，只在它所在的代码块内有效</p>\n<p><strong>变量提升现象：</strong></p>\n<p>var 声明的变量会被提升到作用域顶部，并初始化为 undefined</p>\n<p>let、 const 声明的变量会被提升到顶部，但在声明代码前不能使用（暂时性死区），会被初始化 undefined</p>\n<p><strong>变量&#x2F;常量：</strong></p>\n<p>var 和 let 声明变量，const 声明只读常量</p>\n<p><strong>暂时性死区：</strong></p>\n<p>var 可以先使用，后声明，值为 undefined</p>\n<p>let 、const 必须先声明，后使用；且 const 必须初始化赋值</p>\n<p>在 let、const 声明之前就访问对应的变量与常量，会抛出 ReferenceError，产生原因：</p>\n<p>由 let&#x2F;const 声明的变量，当它们包含的词法环境(Lexical Environment)被实例化时会被创建，但只有在变量的词法绑定(LexicalBinding)已经被求值运算后，才能够被访问（摘自 ES2015 语言标准）</p>\n<p>简单来说：用 let&#x2F;const 声明的变量会先在作用域中被创建出来，但此时还未进行词法绑定，是不能被访问的，会抛出错误。<strong>从在作用域创建变量开始，到变量开始可被访问之间的一段时间，称之为 TDZ(暂时性死区)</strong></p>\n<h3 id=\"2-const-声明的变量是绝对的不可变吗？\"><a href=\"#2-const-声明的变量是绝对的不可变吗？\" class=\"headerlink\" title=\"2.const 声明的变量是绝对的不可变吗？\"></a>2.const 声明的变量是绝对的不可变吗？</h3><p>实际上，不是 const 变量的值不得改动，而是变量指向的那个内存地址不得改动。对于基础类型数据，值保存在变量指向的那个内存地址，等同于常量</p>\n<p>对于复合类型数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const 只能保证这个指针是不变的，至于它指向的数据结构是否变化，是不可控的。</p>\n<p>例如 const 定义一个对象，对象的属性的值是可变的。</p>\n<p><strong>原文地址</strong> <a href=\"https://github.com/yihan12/build-up_ES6-ES12/blob/main/variable/README.md\">第一章 变量</a><br><strong>下一章</strong>：<a href=\"https://github.com/yihan12/build-up_ES6/blob/main/strings/README.md\">第二章 模板字符串、字符串新特性</a></p>\n"},{"title":"【Echarts使用】之 x/y轴刻度、文字、轴线样式、分割线","date":"2022-03-10T03:38:24.514Z","_content":"\n### 隐藏 x/y 轴刻度\n\n```\n// x轴\nxAxis: {\n    type: 'category',\n    splitLine: { show: false },\n    data: ['11/25', '11/26', '11/27', '11/28', '11/29', '11/30', '12/1'],\n    axisTick: {\n        show: false //隐藏x轴刻度\n    },\n},\n// y轴\nyAxis: {\n    type: 'category',\n    splitLine: { show: false },\n    data: ['11/25', '11/26', '11/27', '11/28', '11/29', '11/30', '12/1'],\n    axisTick: {\n        show: false //隐藏y轴刻度\n    },\n},\n```\n\n### 更改 x/y 轴文字\n\n```\n//x轴\nxAxis: {\n    type: 'category',\n    // offset: 40,\n    splitLine: { show: false },\n    data: [],\n    axisLabel: {\n        show: true,\n        textStyle: {\n            color: '#6B6E7F',  //更改坐标轴文字颜色\n            fontSize: 9      //更改坐标轴文字大小\n        }\n    }\n},\n//y轴\nyAxis: {\n    type: 'category',\n    // offset: 40,\n    splitLine: { show: false },\n    data: [],\n    axisLabel: {\n        show: true,\n        textStyle: {\n            color: '#6B6E7F',  //更改坐标轴文字颜色\n            fontSize: 9      //更改坐标轴文字大小\n        }\n    }\n},\n```\n\n### 更改 x/y 轴线样式\n\n```\n// x轴\nxAxis: {\n    type: 'category',\n    // offset: 40,\n    splitLine: { show: false },\n    data: [],\n    axisLine: {\n        show: false,\n        lineStyle: {\n            type: 'dashed',\n            color: '#86899D'\n        }\n    } //0 轴线设置样式\n},\n// y轴\nyAxis: {\n    type: 'category',\n    // offset: 40,\n    splitLine: { show: false },\n    data: [],\n    axisLine: {\n        show: false,\n        lineStyle: {\n            type: 'dashed',\n            color: '#86899D'\n        }\n    } //0 轴线设置样式\n},\n```\n\n### x/y 轴分隔线\n\n```\n// x轴\nxAxis: {\n    type: 'value',\n    axisLabel: {\n        show: false,\n        interval: 'auto',\n        formatter: '{value} AM'\n    },\n    axisTick: {\n        show: false\n    },\n    splitLine: {\n        show: false,\n        lineStyle: {\n            type: 'dashed',\n            color: '#86899D'\n        }\n    } //设置y轴分割线样式\n},\n// y轴\nyAxis: {\n    type: 'value',\n    axisLabel: {\n        show: false,\n        interval: 'auto',\n        formatter: '{value} AM'\n    },\n    min: 20,\n    max: 33, // y轴的展示范围\n    axisTick: {\n        show: false\n    },\n    splitLine: {\n        show: false,\n        lineStyle: {\n            type: 'dashed',\n            color: '#86899D'\n        }\n    } //设置y轴分割线样式\n},\n```\n","source":"_posts/Echarts/echarts--xy轴刻度、文字、轴线样式、分隔线.md","raw":"---\ntitle: 【Echarts使用】之 x/y轴刻度、文字、轴线样式、分割线\ndate:\ntags: [前端, Echarts]\ncategories: [前端, Echarts, xAxis]\n---\n\n### 隐藏 x/y 轴刻度\n\n```\n// x轴\nxAxis: {\n    type: 'category',\n    splitLine: { show: false },\n    data: ['11/25', '11/26', '11/27', '11/28', '11/29', '11/30', '12/1'],\n    axisTick: {\n        show: false //隐藏x轴刻度\n    },\n},\n// y轴\nyAxis: {\n    type: 'category',\n    splitLine: { show: false },\n    data: ['11/25', '11/26', '11/27', '11/28', '11/29', '11/30', '12/1'],\n    axisTick: {\n        show: false //隐藏y轴刻度\n    },\n},\n```\n\n### 更改 x/y 轴文字\n\n```\n//x轴\nxAxis: {\n    type: 'category',\n    // offset: 40,\n    splitLine: { show: false },\n    data: [],\n    axisLabel: {\n        show: true,\n        textStyle: {\n            color: '#6B6E7F',  //更改坐标轴文字颜色\n            fontSize: 9      //更改坐标轴文字大小\n        }\n    }\n},\n//y轴\nyAxis: {\n    type: 'category',\n    // offset: 40,\n    splitLine: { show: false },\n    data: [],\n    axisLabel: {\n        show: true,\n        textStyle: {\n            color: '#6B6E7F',  //更改坐标轴文字颜色\n            fontSize: 9      //更改坐标轴文字大小\n        }\n    }\n},\n```\n\n### 更改 x/y 轴线样式\n\n```\n// x轴\nxAxis: {\n    type: 'category',\n    // offset: 40,\n    splitLine: { show: false },\n    data: [],\n    axisLine: {\n        show: false,\n        lineStyle: {\n            type: 'dashed',\n            color: '#86899D'\n        }\n    } //0 轴线设置样式\n},\n// y轴\nyAxis: {\n    type: 'category',\n    // offset: 40,\n    splitLine: { show: false },\n    data: [],\n    axisLine: {\n        show: false,\n        lineStyle: {\n            type: 'dashed',\n            color: '#86899D'\n        }\n    } //0 轴线设置样式\n},\n```\n\n### x/y 轴分隔线\n\n```\n// x轴\nxAxis: {\n    type: 'value',\n    axisLabel: {\n        show: false,\n        interval: 'auto',\n        formatter: '{value} AM'\n    },\n    axisTick: {\n        show: false\n    },\n    splitLine: {\n        show: false,\n        lineStyle: {\n            type: 'dashed',\n            color: '#86899D'\n        }\n    } //设置y轴分割线样式\n},\n// y轴\nyAxis: {\n    type: 'value',\n    axisLabel: {\n        show: false,\n        interval: 'auto',\n        formatter: '{value} AM'\n    },\n    min: 20,\n    max: 33, // y轴的展示范围\n    axisTick: {\n        show: false\n    },\n    splitLine: {\n        show: false,\n        lineStyle: {\n            type: 'dashed',\n            color: '#86899D'\n        }\n    } //设置y轴分割线样式\n},\n```\n","slug":"Echarts/echarts--xy轴刻度、文字、轴线样式、分隔线","published":1,"updated":"2023-08-13T12:00:34.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll9eg18j00074i2v71vc5aeg","content":"<h3 id=\"隐藏-x-y-轴刻度\"><a href=\"#隐藏-x-y-轴刻度\" class=\"headerlink\" title=\"隐藏 x&#x2F;y 轴刻度\"></a>隐藏 x&#x2F;y 轴刻度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// x轴</span><br><span class=\"line\">xAxis: &#123;</span><br><span class=\"line\">    type: &#x27;category&#x27;,</span><br><span class=\"line\">    splitLine: &#123; show: false &#125;,</span><br><span class=\"line\">    data: [&#x27;11/25&#x27;, &#x27;11/26&#x27;, &#x27;11/27&#x27;, &#x27;11/28&#x27;, &#x27;11/29&#x27;, &#x27;11/30&#x27;, &#x27;12/1&#x27;],</span><br><span class=\"line\">    axisTick: &#123;</span><br><span class=\"line\">        show: false //隐藏x轴刻度</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">// y轴</span><br><span class=\"line\">yAxis: &#123;</span><br><span class=\"line\">    type: &#x27;category&#x27;,</span><br><span class=\"line\">    splitLine: &#123; show: false &#125;,</span><br><span class=\"line\">    data: [&#x27;11/25&#x27;, &#x27;11/26&#x27;, &#x27;11/27&#x27;, &#x27;11/28&#x27;, &#x27;11/29&#x27;, &#x27;11/30&#x27;, &#x27;12/1&#x27;],</span><br><span class=\"line\">    axisTick: &#123;</span><br><span class=\"line\">        show: false //隐藏y轴刻度</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更改-x-y-轴文字\"><a href=\"#更改-x-y-轴文字\" class=\"headerlink\" title=\"更改 x&#x2F;y 轴文字\"></a>更改 x&#x2F;y 轴文字</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//x轴</span><br><span class=\"line\">xAxis: &#123;</span><br><span class=\"line\">    type: &#x27;category&#x27;,</span><br><span class=\"line\">    // offset: 40,</span><br><span class=\"line\">    splitLine: &#123; show: false &#125;,</span><br><span class=\"line\">    data: [],</span><br><span class=\"line\">    axisLabel: &#123;</span><br><span class=\"line\">        show: true,</span><br><span class=\"line\">        textStyle: &#123;</span><br><span class=\"line\">            color: &#x27;#6B6E7F&#x27;,  //更改坐标轴文字颜色</span><br><span class=\"line\">            fontSize: 9      //更改坐标轴文字大小</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">//y轴</span><br><span class=\"line\">yAxis: &#123;</span><br><span class=\"line\">    type: &#x27;category&#x27;,</span><br><span class=\"line\">    // offset: 40,</span><br><span class=\"line\">    splitLine: &#123; show: false &#125;,</span><br><span class=\"line\">    data: [],</span><br><span class=\"line\">    axisLabel: &#123;</span><br><span class=\"line\">        show: true,</span><br><span class=\"line\">        textStyle: &#123;</span><br><span class=\"line\">            color: &#x27;#6B6E7F&#x27;,  //更改坐标轴文字颜色</span><br><span class=\"line\">            fontSize: 9      //更改坐标轴文字大小</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更改-x-y-轴线样式\"><a href=\"#更改-x-y-轴线样式\" class=\"headerlink\" title=\"更改 x&#x2F;y 轴线样式\"></a>更改 x&#x2F;y 轴线样式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// x轴</span><br><span class=\"line\">xAxis: &#123;</span><br><span class=\"line\">    type: &#x27;category&#x27;,</span><br><span class=\"line\">    // offset: 40,</span><br><span class=\"line\">    splitLine: &#123; show: false &#125;,</span><br><span class=\"line\">    data: [],</span><br><span class=\"line\">    axisLine: &#123;</span><br><span class=\"line\">        show: false,</span><br><span class=\"line\">        lineStyle: &#123;</span><br><span class=\"line\">            type: &#x27;dashed&#x27;,</span><br><span class=\"line\">            color: &#x27;#86899D&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; //0 轴线设置样式</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">// y轴</span><br><span class=\"line\">yAxis: &#123;</span><br><span class=\"line\">    type: &#x27;category&#x27;,</span><br><span class=\"line\">    // offset: 40,</span><br><span class=\"line\">    splitLine: &#123; show: false &#125;,</span><br><span class=\"line\">    data: [],</span><br><span class=\"line\">    axisLine: &#123;</span><br><span class=\"line\">        show: false,</span><br><span class=\"line\">        lineStyle: &#123;</span><br><span class=\"line\">            type: &#x27;dashed&#x27;,</span><br><span class=\"line\">            color: &#x27;#86899D&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; //0 轴线设置样式</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x-y-轴分隔线\"><a href=\"#x-y-轴分隔线\" class=\"headerlink\" title=\"x&#x2F;y 轴分隔线\"></a>x&#x2F;y 轴分隔线</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// x轴</span><br><span class=\"line\">xAxis: &#123;</span><br><span class=\"line\">    type: &#x27;value&#x27;,</span><br><span class=\"line\">    axisLabel: &#123;</span><br><span class=\"line\">        show: false,</span><br><span class=\"line\">        interval: &#x27;auto&#x27;,</span><br><span class=\"line\">        formatter: &#x27;&#123;value&#125; AM&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    axisTick: &#123;</span><br><span class=\"line\">        show: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    splitLine: &#123;</span><br><span class=\"line\">        show: false,</span><br><span class=\"line\">        lineStyle: &#123;</span><br><span class=\"line\">            type: &#x27;dashed&#x27;,</span><br><span class=\"line\">            color: &#x27;#86899D&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; //设置y轴分割线样式</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">// y轴</span><br><span class=\"line\">yAxis: &#123;</span><br><span class=\"line\">    type: &#x27;value&#x27;,</span><br><span class=\"line\">    axisLabel: &#123;</span><br><span class=\"line\">        show: false,</span><br><span class=\"line\">        interval: &#x27;auto&#x27;,</span><br><span class=\"line\">        formatter: &#x27;&#123;value&#125; AM&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    min: 20,</span><br><span class=\"line\">    max: 33, // y轴的展示范围</span><br><span class=\"line\">    axisTick: &#123;</span><br><span class=\"line\">        show: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    splitLine: &#123;</span><br><span class=\"line\">        show: false,</span><br><span class=\"line\">        lineStyle: &#123;</span><br><span class=\"line\">            type: &#x27;dashed&#x27;,</span><br><span class=\"line\">            color: &#x27;#86899D&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; //设置y轴分割线样式</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"隐藏-x-y-轴刻度\"><a href=\"#隐藏-x-y-轴刻度\" class=\"headerlink\" title=\"隐藏 x&#x2F;y 轴刻度\"></a>隐藏 x&#x2F;y 轴刻度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// x轴</span><br><span class=\"line\">xAxis: &#123;</span><br><span class=\"line\">    type: &#x27;category&#x27;,</span><br><span class=\"line\">    splitLine: &#123; show: false &#125;,</span><br><span class=\"line\">    data: [&#x27;11/25&#x27;, &#x27;11/26&#x27;, &#x27;11/27&#x27;, &#x27;11/28&#x27;, &#x27;11/29&#x27;, &#x27;11/30&#x27;, &#x27;12/1&#x27;],</span><br><span class=\"line\">    axisTick: &#123;</span><br><span class=\"line\">        show: false //隐藏x轴刻度</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">// y轴</span><br><span class=\"line\">yAxis: &#123;</span><br><span class=\"line\">    type: &#x27;category&#x27;,</span><br><span class=\"line\">    splitLine: &#123; show: false &#125;,</span><br><span class=\"line\">    data: [&#x27;11/25&#x27;, &#x27;11/26&#x27;, &#x27;11/27&#x27;, &#x27;11/28&#x27;, &#x27;11/29&#x27;, &#x27;11/30&#x27;, &#x27;12/1&#x27;],</span><br><span class=\"line\">    axisTick: &#123;</span><br><span class=\"line\">        show: false //隐藏y轴刻度</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更改-x-y-轴文字\"><a href=\"#更改-x-y-轴文字\" class=\"headerlink\" title=\"更改 x&#x2F;y 轴文字\"></a>更改 x&#x2F;y 轴文字</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//x轴</span><br><span class=\"line\">xAxis: &#123;</span><br><span class=\"line\">    type: &#x27;category&#x27;,</span><br><span class=\"line\">    // offset: 40,</span><br><span class=\"line\">    splitLine: &#123; show: false &#125;,</span><br><span class=\"line\">    data: [],</span><br><span class=\"line\">    axisLabel: &#123;</span><br><span class=\"line\">        show: true,</span><br><span class=\"line\">        textStyle: &#123;</span><br><span class=\"line\">            color: &#x27;#6B6E7F&#x27;,  //更改坐标轴文字颜色</span><br><span class=\"line\">            fontSize: 9      //更改坐标轴文字大小</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">//y轴</span><br><span class=\"line\">yAxis: &#123;</span><br><span class=\"line\">    type: &#x27;category&#x27;,</span><br><span class=\"line\">    // offset: 40,</span><br><span class=\"line\">    splitLine: &#123; show: false &#125;,</span><br><span class=\"line\">    data: [],</span><br><span class=\"line\">    axisLabel: &#123;</span><br><span class=\"line\">        show: true,</span><br><span class=\"line\">        textStyle: &#123;</span><br><span class=\"line\">            color: &#x27;#6B6E7F&#x27;,  //更改坐标轴文字颜色</span><br><span class=\"line\">            fontSize: 9      //更改坐标轴文字大小</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更改-x-y-轴线样式\"><a href=\"#更改-x-y-轴线样式\" class=\"headerlink\" title=\"更改 x&#x2F;y 轴线样式\"></a>更改 x&#x2F;y 轴线样式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// x轴</span><br><span class=\"line\">xAxis: &#123;</span><br><span class=\"line\">    type: &#x27;category&#x27;,</span><br><span class=\"line\">    // offset: 40,</span><br><span class=\"line\">    splitLine: &#123; show: false &#125;,</span><br><span class=\"line\">    data: [],</span><br><span class=\"line\">    axisLine: &#123;</span><br><span class=\"line\">        show: false,</span><br><span class=\"line\">        lineStyle: &#123;</span><br><span class=\"line\">            type: &#x27;dashed&#x27;,</span><br><span class=\"line\">            color: &#x27;#86899D&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; //0 轴线设置样式</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">// y轴</span><br><span class=\"line\">yAxis: &#123;</span><br><span class=\"line\">    type: &#x27;category&#x27;,</span><br><span class=\"line\">    // offset: 40,</span><br><span class=\"line\">    splitLine: &#123; show: false &#125;,</span><br><span class=\"line\">    data: [],</span><br><span class=\"line\">    axisLine: &#123;</span><br><span class=\"line\">        show: false,</span><br><span class=\"line\">        lineStyle: &#123;</span><br><span class=\"line\">            type: &#x27;dashed&#x27;,</span><br><span class=\"line\">            color: &#x27;#86899D&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; //0 轴线设置样式</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x-y-轴分隔线\"><a href=\"#x-y-轴分隔线\" class=\"headerlink\" title=\"x&#x2F;y 轴分隔线\"></a>x&#x2F;y 轴分隔线</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// x轴</span><br><span class=\"line\">xAxis: &#123;</span><br><span class=\"line\">    type: &#x27;value&#x27;,</span><br><span class=\"line\">    axisLabel: &#123;</span><br><span class=\"line\">        show: false,</span><br><span class=\"line\">        interval: &#x27;auto&#x27;,</span><br><span class=\"line\">        formatter: &#x27;&#123;value&#125; AM&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    axisTick: &#123;</span><br><span class=\"line\">        show: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    splitLine: &#123;</span><br><span class=\"line\">        show: false,</span><br><span class=\"line\">        lineStyle: &#123;</span><br><span class=\"line\">            type: &#x27;dashed&#x27;,</span><br><span class=\"line\">            color: &#x27;#86899D&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; //设置y轴分割线样式</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">// y轴</span><br><span class=\"line\">yAxis: &#123;</span><br><span class=\"line\">    type: &#x27;value&#x27;,</span><br><span class=\"line\">    axisLabel: &#123;</span><br><span class=\"line\">        show: false,</span><br><span class=\"line\">        interval: &#x27;auto&#x27;,</span><br><span class=\"line\">        formatter: &#x27;&#123;value&#125; AM&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    min: 20,</span><br><span class=\"line\">    max: 33, // y轴的展示范围</span><br><span class=\"line\">    axisTick: &#123;</span><br><span class=\"line\">        show: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    splitLine: &#123;</span><br><span class=\"line\">        show: false,</span><br><span class=\"line\">        lineStyle: &#123;</span><br><span class=\"line\">            type: &#x27;dashed&#x27;,</span><br><span class=\"line\">            color: &#x27;#86899D&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; //设置y轴分割线样式</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n"},{"title":"【浏览器】之同源策略","date":"2023-08-13T06:34:46.171Z","_content":"\n# 什么是浏览器同源策略?\n\n**同源**：如果两个 URL 的协议、域名（主机名）和端口都相同，我们就称这两个 URL 同源。  \n这两个 URL 是同源的\n\n```javascript\nhttps://time.geekbang.org/?category=1\nhttps://time.geekbang.org/?category=0\n```\n\n> **源：就是协议、域名和端口号。**\n>\n> 同源策略：**SOP（Same origin policy）是由 Netscape 公司 1995 年引入浏览器的一种约定**，是浏览器最核心、最基本的安全功能，**若缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击**。**所谓同源是指\"协议+域名+端口\"三者相同，若两个 URL 的协议、域名、端口号都相同**，则两者为同源，有一个不同则非同源，即便两个不同的域名指向同一个 ip 地址，也是非同源的\n\n非同源的 URL 在没有明确授权的情况下，不能读写对方资源（不能相互通信）\n\n具体来讲，同源策略主要表现在 **DOM、Web 数据和网络**这三个层面。\n\n- 第一个，DOM 层面。同源策略限制了来自不同源的 JavaScript 脚本对当前 DOM 对象读和写的操作。\n\n- 第二个，数据层面。同源策略限制了不同源的站点读取当前站点的 Cookie、IndexDB、LocalStorage 等数据。由于同源策略，我们依然无法通过第二个页面的 opener 来访问第一个页面中的 Cookie、IndexDB 或者 LocalStorage 等内容。你可以自己试一下，这里我们就不做演示了。\n\n- 第三个，网络层面。同源策略限制了通过 XMLHttpRequest 等方式将站点的数据发送给不同源的站点。你还记得在《17 | WebAPI：XMLHttpRequest 是怎么实现的？》这篇文章的末尾分析的 XMLHttpRequest 在使用过程中所遇到的坑吗？其中第一个坑就是在默认情况下不能访问跨域的资源。\n\n浏览器默认两个相同的源之间是可以相互访问资源和操作 DOM 的。两个不同的源之间若想要相互访问资源或者操作 DOM，那么会有一套基础的安全策略的制约，我们把这称为**同源策略**。\n\n# 安全与便利\n\n同源策略会隔离不同源的 DOM、页面数据和网络通信，进而实现 Web 页面的安全性。\n\n同源策略将限制以下几种行为：\n\n（1）Cookie、LocalStorage 和 IndexDB 无法读取\n\n（2）DOM 和 Js 对象无法获得\n\n（3）AJAX 请求不能发送\n\n以下两种不受同源策略的限制：\n\n（1）页面中的链接，重定向以及表单提交是不会受到同源策略限制\n\n（2）跨域资源的引入，但是 js 不能读写加载的内容，如嵌入到页面中的`<script src=\"...\"></script>，<img>，<link>，<iframe>`等\n\n注意：\n\n同源策略是浏览器做的限制，对服务器与服务器之间的通信不做限制\n\n**1. 页面中可以嵌入第三方资源**\n\n**2. 跨域资源共享和跨文档消息机制**\n\n# 总结\n\n同源策略会隔离不同源的 DOM、页面数据和网络通信，进而实现 Web 页面的安全性。\n\n不过鱼和熊掌不可兼得，要绝对的安全就要牺牲掉便利性，因此我们要在这二者之间做权衡，找到中间的一个平衡点，也就是目前的页面安全策略原型。总结起来，它具备以下三个特点：\n\n**页面中可以引用第三方资源**，不过这也暴露了很多诸如 **XSS 的安全问题**，因此又在这种开放的基础之上引入了 **CSP** 来限制其自由程度。 **使用 XMLHttpRequest 和 Fetch 都是无法直接进行跨域请求的**，因此浏览器又在这种严格策略的基础之上引入了**跨域资源共享策略（CORS）**，让其可以安全地进行跨域操作。 **两个不同源的 DOM 是不能相互操纵的**，因此，浏览器中又实现了**跨文档消息机制（window.postMessage）**，让其可以比较安全地通信\n\n**原文地址**：[【浏览器】之 同源策略](https://github.com/yihan12/Blog/blob/main/browser/Same-Origin%20Policy.md)\n","source":"_posts/浏览器/ 【浏览器】之同源策略.md","raw":"---\ntitle: 【浏览器】之同源策略\ndate:\ntags: [浏览器]\ncategories: [前端, 浏览器, 同源策略]\n---\n\n# 什么是浏览器同源策略?\n\n**同源**：如果两个 URL 的协议、域名（主机名）和端口都相同，我们就称这两个 URL 同源。  \n这两个 URL 是同源的\n\n```javascript\nhttps://time.geekbang.org/?category=1\nhttps://time.geekbang.org/?category=0\n```\n\n> **源：就是协议、域名和端口号。**\n>\n> 同源策略：**SOP（Same origin policy）是由 Netscape 公司 1995 年引入浏览器的一种约定**，是浏览器最核心、最基本的安全功能，**若缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击**。**所谓同源是指\"协议+域名+端口\"三者相同，若两个 URL 的协议、域名、端口号都相同**，则两者为同源，有一个不同则非同源，即便两个不同的域名指向同一个 ip 地址，也是非同源的\n\n非同源的 URL 在没有明确授权的情况下，不能读写对方资源（不能相互通信）\n\n具体来讲，同源策略主要表现在 **DOM、Web 数据和网络**这三个层面。\n\n- 第一个，DOM 层面。同源策略限制了来自不同源的 JavaScript 脚本对当前 DOM 对象读和写的操作。\n\n- 第二个，数据层面。同源策略限制了不同源的站点读取当前站点的 Cookie、IndexDB、LocalStorage 等数据。由于同源策略，我们依然无法通过第二个页面的 opener 来访问第一个页面中的 Cookie、IndexDB 或者 LocalStorage 等内容。你可以自己试一下，这里我们就不做演示了。\n\n- 第三个，网络层面。同源策略限制了通过 XMLHttpRequest 等方式将站点的数据发送给不同源的站点。你还记得在《17 | WebAPI：XMLHttpRequest 是怎么实现的？》这篇文章的末尾分析的 XMLHttpRequest 在使用过程中所遇到的坑吗？其中第一个坑就是在默认情况下不能访问跨域的资源。\n\n浏览器默认两个相同的源之间是可以相互访问资源和操作 DOM 的。两个不同的源之间若想要相互访问资源或者操作 DOM，那么会有一套基础的安全策略的制约，我们把这称为**同源策略**。\n\n# 安全与便利\n\n同源策略会隔离不同源的 DOM、页面数据和网络通信，进而实现 Web 页面的安全性。\n\n同源策略将限制以下几种行为：\n\n（1）Cookie、LocalStorage 和 IndexDB 无法读取\n\n（2）DOM 和 Js 对象无法获得\n\n（3）AJAX 请求不能发送\n\n以下两种不受同源策略的限制：\n\n（1）页面中的链接，重定向以及表单提交是不会受到同源策略限制\n\n（2）跨域资源的引入，但是 js 不能读写加载的内容，如嵌入到页面中的`<script src=\"...\"></script>，<img>，<link>，<iframe>`等\n\n注意：\n\n同源策略是浏览器做的限制，对服务器与服务器之间的通信不做限制\n\n**1. 页面中可以嵌入第三方资源**\n\n**2. 跨域资源共享和跨文档消息机制**\n\n# 总结\n\n同源策略会隔离不同源的 DOM、页面数据和网络通信，进而实现 Web 页面的安全性。\n\n不过鱼和熊掌不可兼得，要绝对的安全就要牺牲掉便利性，因此我们要在这二者之间做权衡，找到中间的一个平衡点，也就是目前的页面安全策略原型。总结起来，它具备以下三个特点：\n\n**页面中可以引用第三方资源**，不过这也暴露了很多诸如 **XSS 的安全问题**，因此又在这种开放的基础之上引入了 **CSP** 来限制其自由程度。 **使用 XMLHttpRequest 和 Fetch 都是无法直接进行跨域请求的**，因此浏览器又在这种严格策略的基础之上引入了**跨域资源共享策略（CORS）**，让其可以安全地进行跨域操作。 **两个不同源的 DOM 是不能相互操纵的**，因此，浏览器中又实现了**跨文档消息机制（window.postMessage）**，让其可以比较安全地通信\n\n**原文地址**：[【浏览器】之 同源策略](https://github.com/yihan12/Blog/blob/main/browser/Same-Origin%20Policy.md)\n","slug":"浏览器/ 【浏览器】之同源策略","published":1,"updated":"2023-08-13T07:17:18.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll9eg18j00094i2v81or1t4t","content":"<h1 id=\"什么是浏览器同源策略\"><a href=\"#什么是浏览器同源策略\" class=\"headerlink\" title=\"什么是浏览器同源策略?\"></a>什么是浏览器同源策略?</h1><p><strong>同源</strong>：如果两个 URL 的协议、域名（主机名）和端口都相同，我们就称这两个 URL 同源。<br>这两个 URL 是同源的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">https</span>:<span class=\"comment\">//time.geekbang.org/?category=1</span></span><br><span class=\"line\"><span class=\"attr\">https</span>:<span class=\"comment\">//time.geekbang.org/?category=0</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>源：就是协议、域名和端口号。</strong></p>\n<p>同源策略：<strong>SOP（Same origin policy）是由 Netscape 公司 1995 年引入浏览器的一种约定</strong>，是浏览器最核心、最基本的安全功能，<strong>若缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击</strong>。<strong>所谓同源是指”协议+域名+端口”三者相同，若两个 URL 的协议、域名、端口号都相同</strong>，则两者为同源，有一个不同则非同源，即便两个不同的域名指向同一个 ip 地址，也是非同源的</p>\n</blockquote>\n<p>非同源的 URL 在没有明确授权的情况下，不能读写对方资源（不能相互通信）</p>\n<p>具体来讲，同源策略主要表现在 <strong>DOM、Web 数据和网络</strong>这三个层面。</p>\n<ul>\n<li><p>第一个，DOM 层面。同源策略限制了来自不同源的 JavaScript 脚本对当前 DOM 对象读和写的操作。</p>\n</li>\n<li><p>第二个，数据层面。同源策略限制了不同源的站点读取当前站点的 Cookie、IndexDB、LocalStorage 等数据。由于同源策略，我们依然无法通过第二个页面的 opener 来访问第一个页面中的 Cookie、IndexDB 或者 LocalStorage 等内容。你可以自己试一下，这里我们就不做演示了。</p>\n</li>\n<li><p>第三个，网络层面。同源策略限制了通过 XMLHttpRequest 等方式将站点的数据发送给不同源的站点。你还记得在《17 | WebAPI：XMLHttpRequest 是怎么实现的？》这篇文章的末尾分析的 XMLHttpRequest 在使用过程中所遇到的坑吗？其中第一个坑就是在默认情况下不能访问跨域的资源。</p>\n</li>\n</ul>\n<p>浏览器默认两个相同的源之间是可以相互访问资源和操作 DOM 的。两个不同的源之间若想要相互访问资源或者操作 DOM，那么会有一套基础的安全策略的制约，我们把这称为<strong>同源策略</strong>。</p>\n<h1 id=\"安全与便利\"><a href=\"#安全与便利\" class=\"headerlink\" title=\"安全与便利\"></a>安全与便利</h1><p>同源策略会隔离不同源的 DOM、页面数据和网络通信，进而实现 Web 页面的安全性。</p>\n<p>同源策略将限制以下几种行为：</p>\n<p>（1）Cookie、LocalStorage 和 IndexDB 无法读取</p>\n<p>（2）DOM 和 Js 对象无法获得</p>\n<p>（3）AJAX 请求不能发送</p>\n<p>以下两种不受同源策略的限制：</p>\n<p>（1）页面中的链接，重定向以及表单提交是不会受到同源策略限制</p>\n<p>（2）跨域资源的引入，但是 js 不能读写加载的内容，如嵌入到页面中的<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;，&lt;img&gt;，&lt;link&gt;，&lt;iframe&gt;</code>等</p>\n<p>注意：</p>\n<p>同源策略是浏览器做的限制，对服务器与服务器之间的通信不做限制</p>\n<p><strong>1. 页面中可以嵌入第三方资源</strong></p>\n<p><strong>2. 跨域资源共享和跨文档消息机制</strong></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>同源策略会隔离不同源的 DOM、页面数据和网络通信，进而实现 Web 页面的安全性。</p>\n<p>不过鱼和熊掌不可兼得，要绝对的安全就要牺牲掉便利性，因此我们要在这二者之间做权衡，找到中间的一个平衡点，也就是目前的页面安全策略原型。总结起来，它具备以下三个特点：</p>\n<p><strong>页面中可以引用第三方资源</strong>，不过这也暴露了很多诸如 <strong>XSS 的安全问题</strong>，因此又在这种开放的基础之上引入了 <strong>CSP</strong> 来限制其自由程度。 <strong>使用 XMLHttpRequest 和 Fetch 都是无法直接进行跨域请求的</strong>，因此浏览器又在这种严格策略的基础之上引入了<strong>跨域资源共享策略（CORS）</strong>，让其可以安全地进行跨域操作。 <strong>两个不同源的 DOM 是不能相互操纵的</strong>，因此，浏览器中又实现了<strong>跨文档消息机制（window.postMessage）</strong>，让其可以比较安全地通信</p>\n<p><strong>原文地址</strong>：<a href=\"https://github.com/yihan12/Blog/blob/main/browser/Same-Origin%20Policy.md\">【浏览器】之 同源策略</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是浏览器同源策略\"><a href=\"#什么是浏览器同源策略\" class=\"headerlink\" title=\"什么是浏览器同源策略?\"></a>什么是浏览器同源策略?</h1><p><strong>同源</strong>：如果两个 URL 的协议、域名（主机名）和端口都相同，我们就称这两个 URL 同源。<br>这两个 URL 是同源的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">https</span>:<span class=\"comment\">//time.geekbang.org/?category=1</span></span><br><span class=\"line\"><span class=\"attr\">https</span>:<span class=\"comment\">//time.geekbang.org/?category=0</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>源：就是协议、域名和端口号。</strong></p>\n<p>同源策略：<strong>SOP（Same origin policy）是由 Netscape 公司 1995 年引入浏览器的一种约定</strong>，是浏览器最核心、最基本的安全功能，<strong>若缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击</strong>。<strong>所谓同源是指”协议+域名+端口”三者相同，若两个 URL 的协议、域名、端口号都相同</strong>，则两者为同源，有一个不同则非同源，即便两个不同的域名指向同一个 ip 地址，也是非同源的</p>\n</blockquote>\n<p>非同源的 URL 在没有明确授权的情况下，不能读写对方资源（不能相互通信）</p>\n<p>具体来讲，同源策略主要表现在 <strong>DOM、Web 数据和网络</strong>这三个层面。</p>\n<ul>\n<li><p>第一个，DOM 层面。同源策略限制了来自不同源的 JavaScript 脚本对当前 DOM 对象读和写的操作。</p>\n</li>\n<li><p>第二个，数据层面。同源策略限制了不同源的站点读取当前站点的 Cookie、IndexDB、LocalStorage 等数据。由于同源策略，我们依然无法通过第二个页面的 opener 来访问第一个页面中的 Cookie、IndexDB 或者 LocalStorage 等内容。你可以自己试一下，这里我们就不做演示了。</p>\n</li>\n<li><p>第三个，网络层面。同源策略限制了通过 XMLHttpRequest 等方式将站点的数据发送给不同源的站点。你还记得在《17 | WebAPI：XMLHttpRequest 是怎么实现的？》这篇文章的末尾分析的 XMLHttpRequest 在使用过程中所遇到的坑吗？其中第一个坑就是在默认情况下不能访问跨域的资源。</p>\n</li>\n</ul>\n<p>浏览器默认两个相同的源之间是可以相互访问资源和操作 DOM 的。两个不同的源之间若想要相互访问资源或者操作 DOM，那么会有一套基础的安全策略的制约，我们把这称为<strong>同源策略</strong>。</p>\n<h1 id=\"安全与便利\"><a href=\"#安全与便利\" class=\"headerlink\" title=\"安全与便利\"></a>安全与便利</h1><p>同源策略会隔离不同源的 DOM、页面数据和网络通信，进而实现 Web 页面的安全性。</p>\n<p>同源策略将限制以下几种行为：</p>\n<p>（1）Cookie、LocalStorage 和 IndexDB 无法读取</p>\n<p>（2）DOM 和 Js 对象无法获得</p>\n<p>（3）AJAX 请求不能发送</p>\n<p>以下两种不受同源策略的限制：</p>\n<p>（1）页面中的链接，重定向以及表单提交是不会受到同源策略限制</p>\n<p>（2）跨域资源的引入，但是 js 不能读写加载的内容，如嵌入到页面中的<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;，&lt;img&gt;，&lt;link&gt;，&lt;iframe&gt;</code>等</p>\n<p>注意：</p>\n<p>同源策略是浏览器做的限制，对服务器与服务器之间的通信不做限制</p>\n<p><strong>1. 页面中可以嵌入第三方资源</strong></p>\n<p><strong>2. 跨域资源共享和跨文档消息机制</strong></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>同源策略会隔离不同源的 DOM、页面数据和网络通信，进而实现 Web 页面的安全性。</p>\n<p>不过鱼和熊掌不可兼得，要绝对的安全就要牺牲掉便利性，因此我们要在这二者之间做权衡，找到中间的一个平衡点，也就是目前的页面安全策略原型。总结起来，它具备以下三个特点：</p>\n<p><strong>页面中可以引用第三方资源</strong>，不过这也暴露了很多诸如 <strong>XSS 的安全问题</strong>，因此又在这种开放的基础之上引入了 <strong>CSP</strong> 来限制其自由程度。 <strong>使用 XMLHttpRequest 和 Fetch 都是无法直接进行跨域请求的</strong>，因此浏览器又在这种严格策略的基础之上引入了<strong>跨域资源共享策略（CORS）</strong>，让其可以安全地进行跨域操作。 <strong>两个不同源的 DOM 是不能相互操纵的</strong>，因此，浏览器中又实现了<strong>跨文档消息机制（window.postMessage）</strong>，让其可以比较安全地通信</p>\n<p><strong>原文地址</strong>：<a href=\"https://github.com/yihan12/Blog/blob/main/browser/Same-Origin%20Policy.md\">【浏览器】之 同源策略</a></p>\n"},{"title":"【Echarts使用】之 grid","date":"2022-03-10T03:38:39.986Z","_content":"\n### 示例\n\n```\ngrid: {\n    top: '3%',\n    left: '12%',\n    right: '0%',\n    bottom: '3%',\n    containLabel: true\n},\n```\n\necharts 组件离容器左侧的距离。\n\n> `containLabel`:\n> containLabel 为 false 的时候：  \n> grid.left grid.right grid.top grid.bottom grid.width grid.height 决定的是由坐标轴形成的矩形的尺寸和位置。\n> 这比较适用于多个 grid 进行对齐的场景，因为往往多个 grid 对齐的时候，是依据坐标轴来对齐的。\n>\n> containLabel 为 true 的时候：  \n> grid.left grid.right grid.top grid.bottom grid.width grid.height 决定的是包括了坐标轴标签在内的所有内容所形成的矩形的位置。\n> 这常用于『防止标签溢出』的场景，标签溢出指的是，标签长度动态变化时，可能会溢出容器或者覆盖其他组件。\n","source":"_posts/Echarts/echarts--上下左右的距离（grid）.md","raw":"---\ntitle: 【Echarts使用】之 grid\ndate:\ntags: [前端, Echarts]\ncategories: [前端, Echarts, grid]\n---\n\n### 示例\n\n```\ngrid: {\n    top: '3%',\n    left: '12%',\n    right: '0%',\n    bottom: '3%',\n    containLabel: true\n},\n```\n\necharts 组件离容器左侧的距离。\n\n> `containLabel`:\n> containLabel 为 false 的时候：  \n> grid.left grid.right grid.top grid.bottom grid.width grid.height 决定的是由坐标轴形成的矩形的尺寸和位置。\n> 这比较适用于多个 grid 进行对齐的场景，因为往往多个 grid 对齐的时候，是依据坐标轴来对齐的。\n>\n> containLabel 为 true 的时候：  \n> grid.left grid.right grid.top grid.bottom grid.width grid.height 决定的是包括了坐标轴标签在内的所有内容所形成的矩形的位置。\n> 这常用于『防止标签溢出』的场景，标签溢出指的是，标签长度动态变化时，可能会溢出容器或者覆盖其他组件。\n","slug":"Echarts/echarts--上下左右的距离（grid）","published":1,"updated":"2023-08-13T11:59:37.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll9eg18k000a4i2v51zc666j","content":"<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grid: &#123;</span><br><span class=\"line\">    top: &#x27;3%&#x27;,</span><br><span class=\"line\">    left: &#x27;12%&#x27;,</span><br><span class=\"line\">    right: &#x27;0%&#x27;,</span><br><span class=\"line\">    bottom: &#x27;3%&#x27;,</span><br><span class=\"line\">    containLabel: true</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>echarts 组件离容器左侧的距离。</p>\n<blockquote>\n<p><code>containLabel</code>:<br>containLabel 为 false 的时候：<br>grid.left grid.right grid.top grid.bottom grid.width grid.height 决定的是由坐标轴形成的矩形的尺寸和位置。<br>这比较适用于多个 grid 进行对齐的场景，因为往往多个 grid 对齐的时候，是依据坐标轴来对齐的。</p>\n<p>containLabel 为 true 的时候：<br>grid.left grid.right grid.top grid.bottom grid.width grid.height 决定的是包括了坐标轴标签在内的所有内容所形成的矩形的位置。<br>这常用于『防止标签溢出』的场景，标签溢出指的是，标签长度动态变化时，可能会溢出容器或者覆盖其他组件。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grid: &#123;</span><br><span class=\"line\">    top: &#x27;3%&#x27;,</span><br><span class=\"line\">    left: &#x27;12%&#x27;,</span><br><span class=\"line\">    right: &#x27;0%&#x27;,</span><br><span class=\"line\">    bottom: &#x27;3%&#x27;,</span><br><span class=\"line\">    containLabel: true</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>echarts 组件离容器左侧的距离。</p>\n<blockquote>\n<p><code>containLabel</code>:<br>containLabel 为 false 的时候：<br>grid.left grid.right grid.top grid.bottom grid.width grid.height 决定的是由坐标轴形成的矩形的尺寸和位置。<br>这比较适用于多个 grid 进行对齐的场景，因为往往多个 grid 对齐的时候，是依据坐标轴来对齐的。</p>\n<p>containLabel 为 true 的时候：<br>grid.left grid.right grid.top grid.bottom grid.width grid.height 决定的是包括了坐标轴标签在内的所有内容所形成的矩形的位置。<br>这常用于『防止标签溢出』的场景，标签溢出指的是，标签长度动态变化时，可能会溢出容器或者覆盖其他组件。</p>\n</blockquote>\n"},{"title":"【Echarts使用】之基准线markLine","date":"2022-03-10T03:38:35.048Z","_content":"\n### 设置了两条基准线\n\n```\nmarkLine: {\n    symbol: \"none\",\n    data: [{\n        label: {\n            width: \"30\",\n            position: 'start',\n            formatter: t('sleepManage_cycle.sameChart.rs'),\n            fontSize: '10',\n            color: '#86899D',\n            overflow: 'break',\n        },\n        silent: false,\n        lineStyle: {\n            type: \"dashed\",\n            color: \"#714EB3\"\n        },\n        yAxis: 10\n    },\n    {\n        label: {\n            width: \"30\",\n            position: 'start',\n            formatter: t('sleepManage_cycle.sameChart.qc'),\n            fontSize: '10',\n            color: '#86899D',\n            overflow: 'break',\n        },\n        silent: false,\n        lineStyle: {\n            type: \"dashed\",\n            color: \"#3F6293\"\n        },\n        yAxis: 1\n    }]\n},\n```\n\n### 关键参数\n\n> `yAxis`:基准线的坐标\n\n> `overflow`:  \n> 'truncate' 截断，并在末尾显示 ellipsis 配置的文本，默认为...  \n> 'break' 换行  \n> 'breakAll' 换行，跟'break'不同的是，在英语等拉丁文中，'breakAll'还会强制单词内换行\n\n> `ellipsis`:在 overflow 配置为'truncate'的时候，可以通过该属性配置末尾显示的文本。\n","source":"_posts/Echarts/echarts--基准线markLine.md","raw":"---\ntitle: 【Echarts使用】之基准线markLine\ndate:\ntags: [前端, Echarts]\ncategories: [前端, Echarts, markLine]\n---\n\n### 设置了两条基准线\n\n```\nmarkLine: {\n    symbol: \"none\",\n    data: [{\n        label: {\n            width: \"30\",\n            position: 'start',\n            formatter: t('sleepManage_cycle.sameChart.rs'),\n            fontSize: '10',\n            color: '#86899D',\n            overflow: 'break',\n        },\n        silent: false,\n        lineStyle: {\n            type: \"dashed\",\n            color: \"#714EB3\"\n        },\n        yAxis: 10\n    },\n    {\n        label: {\n            width: \"30\",\n            position: 'start',\n            formatter: t('sleepManage_cycle.sameChart.qc'),\n            fontSize: '10',\n            color: '#86899D',\n            overflow: 'break',\n        },\n        silent: false,\n        lineStyle: {\n            type: \"dashed\",\n            color: \"#3F6293\"\n        },\n        yAxis: 1\n    }]\n},\n```\n\n### 关键参数\n\n> `yAxis`:基准线的坐标\n\n> `overflow`:  \n> 'truncate' 截断，并在末尾显示 ellipsis 配置的文本，默认为...  \n> 'break' 换行  \n> 'breakAll' 换行，跟'break'不同的是，在英语等拉丁文中，'breakAll'还会强制单词内换行\n\n> `ellipsis`:在 overflow 配置为'truncate'的时候，可以通过该属性配置末尾显示的文本。\n","slug":"Echarts/echarts--基准线markLine","published":1,"updated":"2023-08-13T11:59:03.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll9eg18l000d4i2v5uei48rc","content":"<h3 id=\"设置了两条基准线\"><a href=\"#设置了两条基准线\" class=\"headerlink\" title=\"设置了两条基准线\"></a>设置了两条基准线</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">markLine: &#123;</span><br><span class=\"line\">    symbol: &quot;none&quot;,</span><br><span class=\"line\">    data: [&#123;</span><br><span class=\"line\">        label: &#123;</span><br><span class=\"line\">            width: &quot;30&quot;,</span><br><span class=\"line\">            position: &#x27;start&#x27;,</span><br><span class=\"line\">            formatter: t(&#x27;sleepManage_cycle.sameChart.rs&#x27;),</span><br><span class=\"line\">            fontSize: &#x27;10&#x27;,</span><br><span class=\"line\">            color: &#x27;#86899D&#x27;,</span><br><span class=\"line\">            overflow: &#x27;break&#x27;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        silent: false,</span><br><span class=\"line\">        lineStyle: &#123;</span><br><span class=\"line\">            type: &quot;dashed&quot;,</span><br><span class=\"line\">            color: &quot;#714EB3&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        yAxis: 10</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        label: &#123;</span><br><span class=\"line\">            width: &quot;30&quot;,</span><br><span class=\"line\">            position: &#x27;start&#x27;,</span><br><span class=\"line\">            formatter: t(&#x27;sleepManage_cycle.sameChart.qc&#x27;),</span><br><span class=\"line\">            fontSize: &#x27;10&#x27;,</span><br><span class=\"line\">            color: &#x27;#86899D&#x27;,</span><br><span class=\"line\">            overflow: &#x27;break&#x27;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        silent: false,</span><br><span class=\"line\">        lineStyle: &#123;</span><br><span class=\"line\">            type: &quot;dashed&quot;,</span><br><span class=\"line\">            color: &quot;#3F6293&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        yAxis: 1</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关键参数\"><a href=\"#关键参数\" class=\"headerlink\" title=\"关键参数\"></a>关键参数</h3><blockquote>\n<p><code>yAxis</code>:基准线的坐标</p>\n</blockquote>\n<blockquote>\n<p><code>overflow</code>:<br>‘truncate’ 截断，并在末尾显示 ellipsis 配置的文本，默认为…<br>‘break’ 换行<br>‘breakAll’ 换行，跟’break’不同的是，在英语等拉丁文中，’breakAll’还会强制单词内换行</p>\n</blockquote>\n<blockquote>\n<p><code>ellipsis</code>:在 overflow 配置为’truncate’的时候，可以通过该属性配置末尾显示的文本。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"设置了两条基准线\"><a href=\"#设置了两条基准线\" class=\"headerlink\" title=\"设置了两条基准线\"></a>设置了两条基准线</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">markLine: &#123;</span><br><span class=\"line\">    symbol: &quot;none&quot;,</span><br><span class=\"line\">    data: [&#123;</span><br><span class=\"line\">        label: &#123;</span><br><span class=\"line\">            width: &quot;30&quot;,</span><br><span class=\"line\">            position: &#x27;start&#x27;,</span><br><span class=\"line\">            formatter: t(&#x27;sleepManage_cycle.sameChart.rs&#x27;),</span><br><span class=\"line\">            fontSize: &#x27;10&#x27;,</span><br><span class=\"line\">            color: &#x27;#86899D&#x27;,</span><br><span class=\"line\">            overflow: &#x27;break&#x27;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        silent: false,</span><br><span class=\"line\">        lineStyle: &#123;</span><br><span class=\"line\">            type: &quot;dashed&quot;,</span><br><span class=\"line\">            color: &quot;#714EB3&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        yAxis: 10</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        label: &#123;</span><br><span class=\"line\">            width: &quot;30&quot;,</span><br><span class=\"line\">            position: &#x27;start&#x27;,</span><br><span class=\"line\">            formatter: t(&#x27;sleepManage_cycle.sameChart.qc&#x27;),</span><br><span class=\"line\">            fontSize: &#x27;10&#x27;,</span><br><span class=\"line\">            color: &#x27;#86899D&#x27;,</span><br><span class=\"line\">            overflow: &#x27;break&#x27;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        silent: false,</span><br><span class=\"line\">        lineStyle: &#123;</span><br><span class=\"line\">            type: &quot;dashed&quot;,</span><br><span class=\"line\">            color: &quot;#3F6293&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        yAxis: 1</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关键参数\"><a href=\"#关键参数\" class=\"headerlink\" title=\"关键参数\"></a>关键参数</h3><blockquote>\n<p><code>yAxis</code>:基准线的坐标</p>\n</blockquote>\n<blockquote>\n<p><code>overflow</code>:<br>‘truncate’ 截断，并在末尾显示 ellipsis 配置的文本，默认为…<br>‘break’ 换行<br>‘breakAll’ 换行，跟’break’不同的是，在英语等拉丁文中，’breakAll’还会强制单词内换行</p>\n</blockquote>\n<blockquote>\n<p><code>ellipsis</code>:在 overflow 配置为’truncate’的时候，可以通过该属性配置末尾显示的文本。</p>\n</blockquote>\n"},{"title":"【Echarts使用】之 无数据是连线","date":"2022-03-10T03:38:59.886Z","_content":"\n```\nseries:[\n    {\n        type: 'line',\n        connectNulls: true,//无数据是是否连线\n        stack: 'Total',\n        symbol: 'circle', //拐点样式\n        symbolSize: 4, //拐点圆大小\n        itemStyle: {\n            color: '#292B37', //拐点内圆颜色\n            borderColor: '#5B5E74', //拐点外圆颜色\n            width: 2, //拐点内圆大小\n        },\n    }\n]\n```\n","source":"_posts/Echarts/echarts折线--无数据时连线与否.md","raw":"---\ntitle: 【Echarts使用】之 无数据是连线\ndate:\ntags: [前端, Echarts]\ncategories: [前端, Echarts, connectNulls]\n---\n\n```\nseries:[\n    {\n        type: 'line',\n        connectNulls: true,//无数据是是否连线\n        stack: 'Total',\n        symbol: 'circle', //拐点样式\n        symbolSize: 4, //拐点圆大小\n        itemStyle: {\n            color: '#292B37', //拐点内圆颜色\n            borderColor: '#5B5E74', //拐点外圆颜色\n            width: 2, //拐点内圆大小\n        },\n    }\n]\n```\n","slug":"Echarts/echarts折线--无数据时连线与否","published":1,"updated":"2023-08-13T12:03:19.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll9eg18m000e4i2vbg47afa6","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">series:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: &#x27;line&#x27;,</span><br><span class=\"line\">        connectNulls: true,//无数据是是否连线</span><br><span class=\"line\">        stack: &#x27;Total&#x27;,</span><br><span class=\"line\">        symbol: &#x27;circle&#x27;, //拐点样式</span><br><span class=\"line\">        symbolSize: 4, //拐点圆大小</span><br><span class=\"line\">        itemStyle: &#123;</span><br><span class=\"line\">            color: &#x27;#292B37&#x27;, //拐点内圆颜色</span><br><span class=\"line\">            borderColor: &#x27;#5B5E74&#x27;, //拐点外圆颜色</span><br><span class=\"line\">            width: 2, //拐点内圆大小</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">series:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: &#x27;line&#x27;,</span><br><span class=\"line\">        connectNulls: true,//无数据是是否连线</span><br><span class=\"line\">        stack: &#x27;Total&#x27;,</span><br><span class=\"line\">        symbol: &#x27;circle&#x27;, //拐点样式</span><br><span class=\"line\">        symbolSize: 4, //拐点圆大小</span><br><span class=\"line\">        itemStyle: &#123;</span><br><span class=\"line\">            color: &#x27;#292B37&#x27;, //拐点内圆颜色</span><br><span class=\"line\">            borderColor: &#x27;#5B5E74&#x27;, //拐点外圆颜色</span><br><span class=\"line\">            width: 2, //拐点内圆大小</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n"},{"title":"【Echarts使用】之 图例选中状态","date":"2022-03-10T03:38:52.203Z","_content":"\n图例选中状态表。\n\n```\nlegend:{\n    selected: {\n        // 选中'系列1'\n        '系列1': true,\n        // 不选中'系列2'\n        '系列2': false\n    }\n}\n```\n\n使用\n\n```\nlegend: {\n    show: true,\n    selected: {\n      '1星': true, '2星': true, '3星': true, '4星': false, '5星': false\n    },\n    bottom: 0\n},\n```\n","source":"_posts/Echarts/echarts图例--选中状态（默认不显示置灰）.md","raw":"---\ntitle: 【Echarts使用】之 图例选中状态\ndate:\ntags: [前端, Echarts]\ncategories: [前端, Echarts, legend]\n---\n\n图例选中状态表。\n\n```\nlegend:{\n    selected: {\n        // 选中'系列1'\n        '系列1': true,\n        // 不选中'系列2'\n        '系列2': false\n    }\n}\n```\n\n使用\n\n```\nlegend: {\n    show: true,\n    selected: {\n      '1星': true, '2星': true, '3星': true, '4星': false, '5星': false\n    },\n    bottom: 0\n},\n```\n","slug":"Echarts/echarts图例--选中状态（默认不显示置灰）","published":1,"updated":"2023-08-13T12:01:58.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll9eg18m000h4i2v4b1ifv1d","content":"<p>图例选中状态表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">legend:&#123;</span><br><span class=\"line\">    selected: &#123;</span><br><span class=\"line\">        // 选中&#x27;系列1&#x27;</span><br><span class=\"line\">        &#x27;系列1&#x27;: true,</span><br><span class=\"line\">        // 不选中&#x27;系列2&#x27;</span><br><span class=\"line\">        &#x27;系列2&#x27;: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">legend: &#123;</span><br><span class=\"line\">    show: true,</span><br><span class=\"line\">    selected: &#123;</span><br><span class=\"line\">      &#x27;1星&#x27;: true, &#x27;2星&#x27;: true, &#x27;3星&#x27;: true, &#x27;4星&#x27;: false, &#x27;5星&#x27;: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    bottom: 0</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>图例选中状态表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">legend:&#123;</span><br><span class=\"line\">    selected: &#123;</span><br><span class=\"line\">        // 选中&#x27;系列1&#x27;</span><br><span class=\"line\">        &#x27;系列1&#x27;: true,</span><br><span class=\"line\">        // 不选中&#x27;系列2&#x27;</span><br><span class=\"line\">        &#x27;系列2&#x27;: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">legend: &#123;</span><br><span class=\"line\">    show: true,</span><br><span class=\"line\">    selected: &#123;</span><br><span class=\"line\">      &#x27;1星&#x27;: true, &#x27;2星&#x27;: true, &#x27;3星&#x27;: true, &#x27;4星&#x27;: false, &#x27;5星&#x27;: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    bottom: 0</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n"},{"title":"【ES6学习笔记】之 解构赋值","date":"2023-08-13T06:23:26.686Z","_content":"\n# 概览\n\n> 解构只是意味着将复杂的结构分解成更简单的部分。在 JavaScript 中，这种复杂的结构通常是一个对象或一个数组。使用解构语法，您可以从数组和对象中提取更小的片段。解构语法可用于变量声明或变量赋值。您还可以使用嵌套解构语法来处理嵌套结构。\n\n```javascript\n// old\nconst student = {\n  name: 'John Doe',\n  age: 16,\n  scores: {\n    maths: 74,\n    english: 63,\n    science: 85,\n  },\n}\n\nfunction displaySummary(student) {\n  console.log('Hello, ' + student.name)\n  console.log('Your Maths score is ' + (student.scores.maths || 0))\n  console.log('Your English score is ' + (student.scores.english || 0))\n  console.log('Your Science score is ' + (student.scores.science || 0))\n}\n\ndisplaySummary(student)\n\n// Hello, John Doe\n// Your Maths score is 74\n// Your English score is 63\n// Your Science score is 85\n```\n\n用 ES6 结构赋值，我们可以这么写\n\n```javascript\n// ES6\nfunction displaySummary({\n  name,\n  scores: { maths = 0, english = 0, science = 0 },\n}) {\n  console.log('Hello, ' + name)\n  console.log('Your Maths score is ' + maths)\n  console.log('Your English score is ' + english)\n  console.log('Your Science score is ' + science)\n}\n```\n\n# 对象解构\n\n对象解构构像是：用变量声明属性，变量值即为属性值，简单来说，就是提取对象中的属性。\n\n```javascript\nconst student = {\n  firstname: 'Glad',\n  lastname: 'Chinda',\n  country: 'Nigeria',\n}\n\n// Object Destructuring\nconst { firstname, lastname, country } = student\n\nconsole.log(firstname, lastname, country) // Glad Chinda Nigeria\n```\n\n利用解构给变量重新赋值\n\n```javascript\n// Initialize local variables\nlet country = 'Canada'\nlet firstname = 'John'\nlet lastname = 'Doe'\n\nconst student = {\n  firstname: 'Glad',\n  lastname: 'Chinda',\n  country: 'Nigeria',\n}\n\n// Reassign firstname and lastname using destructuring\n// Enclose in a pair of parentheses, since this is an assignment expression\n;({ firstname, lastname } = student)\n\n// country remains unchanged (Canada)\nconsole.log(firstname, lastname, country) // Glad Chinda Canada\n```\n\n上面代码，用解构赋值的方式重新给 firstname, lastname 变量赋值，所以后面打印的时候，firstname, lastname 显示是 student 内部的 firstname, lastname。country 并未重新赋值，所以还是之前定义的名字。如果将中间的代码改为`({ firstname, lastname , country} = student);`。那么, country 的值也会被重新赋值，为'Nigeria'\n\n下面看下嵌套对象的结构：\n\n```javascript\nconst student = {\n  name: 'John Doe',\n  age: 16,\n  scores: {\n    maths: 74,\n    english: 63,\n  },\n}\n\n// We define 3 local variables: name, maths, science\nconst {\n  name,\n  scores: { maths, science = 50 },\n} = student\n\nconsole.log(\n  `${name} scored ${maths} in Maths and ${science} in Elementary Science.`\n)\n\n// John Doe scored 74 in Maths and 50 in Elementary Science.\n```\n\n使用嵌套对象解构时，要小心避免使用空的嵌套对象字面量。虽然它是有效的语法，但它实际上没有赋值。例如，上面的 science，如果改成 `const { name, scores: {maths, science} } = student;`。那么`science`的值将是`undefined`\n\n点运算配合解构赋值：\n\n```javascript\nconst person = {\n  name: 'John Doe',\n  country: 'Canada',\n  city: 'shenzhen',\n  org: '123',\n  id: '1',\n}\n\n// Assign default value of 25 to age if undefined\nconst { id = '', ...all } = person\nconsole.log(all) //{ name: 'John Doe',country: 'Canada',city:'shenzhen',org:'123',}\n```\n\n从案例中我们可以可以通过点运算+对象解构赋值，可以去除对象的属性，并将剩余属性赋值给`all`。\n\n- 从对象中取多个属性，有了新的处理。\n- 从对象中无损删除属性，有了新的处理。\n\n当然我们也可以删除多个属性：\n\n```\nconst person = {\n    name: 'John Doe',\n    country: 'Canada',\n    city:'shenzhen',\n    org:'123',\n    id:'1'\n};\n\n// Assign default value of 25 to age if undefined\nconst { id=\"\",name=\"\", ...all } = person;\nconsole.log(all) //{country: 'Canada',city:'shenzhen',org:'123'}\n```\n\n# 数组解构\n\n> 在数组解构中，您在赋值表达式的左侧使用数组文字。数组文字上的每个变量名都映射到解构数组上同一索引处的相应项目。\n\n```javascript\nconst rgb = [255, 200, 0]\n\n// Array Destructuring\nconst [red, green, blue] = rgb\n\nconsole.log(`R: ${red}, G: ${green}, B: ${blue}`) // R: 255, G: 200, B: 0\n```\n\n#### 逗号可以跳过元素\n\n```javascript\nlet [, , x] = [1, 2, 3, 4]\nconsole.log(x) // 3\n```\n\n#### 数组点运算\n\n```javascript\nlet [x, ...y] = [1, 2, 3, 4]\nconsole.log(x, y) // 1 [2,3,4]\n\nlet [x, y, ...z] = ['a'] // x='a'; y=undefined; z=[]\n\nlet [x, ...[y, z]] = ['a', 'b', 'c']\n// x = 'a'; y = 'b'; z = 'c'\n```\n\n#### 循环\n\n```javascript\nfor (let [key, value] of map) {\n  console.log(key + ' is ' + value)\n}\n```\n\n#### 交换值\n\n```javascript\n;[x, y] = [y, x]\n```\n\n#### 数组删除元素\n\n```javascript\nlet [first, ...rest] = ['a', 'b', 'c']\n// first = 'a'; rest = ['b', 'c']\n```\n\n#### 克隆数组\n\n```javascript\nconst rainbow = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\n\n// Cloning with array destructuring and spread operator\nconst [...rainbowClone] = rainbow\n\nconsole.log(rainbow === rainbowClone) // false\nconsole.log(rainbowClone) // ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\n```\n\n# 字符串解构\n\n字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象\n\n```javascript\nconst [a, b, c, d, e] = 'hello'\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n```\n\n属性解构赋值\n\n```javascript\nlet { length: len } = 'hello'\nlen // 5\n```\n\n**原文地址**： [Destructuring](https://github.com/yihan12/build-up_ES6-ES12/blob/main/variable/Destructuring.md)\n","source":"_posts/ES6学习笔记/【ES6学习笔记】之解构赋值.md","raw":"---\ntitle: 【ES6学习笔记】之 解构赋值\ndate:\ntags: [JavaScript, ES6]\ncategories: [前端, ES6, 解构]\n---\n\n# 概览\n\n> 解构只是意味着将复杂的结构分解成更简单的部分。在 JavaScript 中，这种复杂的结构通常是一个对象或一个数组。使用解构语法，您可以从数组和对象中提取更小的片段。解构语法可用于变量声明或变量赋值。您还可以使用嵌套解构语法来处理嵌套结构。\n\n```javascript\n// old\nconst student = {\n  name: 'John Doe',\n  age: 16,\n  scores: {\n    maths: 74,\n    english: 63,\n    science: 85,\n  },\n}\n\nfunction displaySummary(student) {\n  console.log('Hello, ' + student.name)\n  console.log('Your Maths score is ' + (student.scores.maths || 0))\n  console.log('Your English score is ' + (student.scores.english || 0))\n  console.log('Your Science score is ' + (student.scores.science || 0))\n}\n\ndisplaySummary(student)\n\n// Hello, John Doe\n// Your Maths score is 74\n// Your English score is 63\n// Your Science score is 85\n```\n\n用 ES6 结构赋值，我们可以这么写\n\n```javascript\n// ES6\nfunction displaySummary({\n  name,\n  scores: { maths = 0, english = 0, science = 0 },\n}) {\n  console.log('Hello, ' + name)\n  console.log('Your Maths score is ' + maths)\n  console.log('Your English score is ' + english)\n  console.log('Your Science score is ' + science)\n}\n```\n\n# 对象解构\n\n对象解构构像是：用变量声明属性，变量值即为属性值，简单来说，就是提取对象中的属性。\n\n```javascript\nconst student = {\n  firstname: 'Glad',\n  lastname: 'Chinda',\n  country: 'Nigeria',\n}\n\n// Object Destructuring\nconst { firstname, lastname, country } = student\n\nconsole.log(firstname, lastname, country) // Glad Chinda Nigeria\n```\n\n利用解构给变量重新赋值\n\n```javascript\n// Initialize local variables\nlet country = 'Canada'\nlet firstname = 'John'\nlet lastname = 'Doe'\n\nconst student = {\n  firstname: 'Glad',\n  lastname: 'Chinda',\n  country: 'Nigeria',\n}\n\n// Reassign firstname and lastname using destructuring\n// Enclose in a pair of parentheses, since this is an assignment expression\n;({ firstname, lastname } = student)\n\n// country remains unchanged (Canada)\nconsole.log(firstname, lastname, country) // Glad Chinda Canada\n```\n\n上面代码，用解构赋值的方式重新给 firstname, lastname 变量赋值，所以后面打印的时候，firstname, lastname 显示是 student 内部的 firstname, lastname。country 并未重新赋值，所以还是之前定义的名字。如果将中间的代码改为`({ firstname, lastname , country} = student);`。那么, country 的值也会被重新赋值，为'Nigeria'\n\n下面看下嵌套对象的结构：\n\n```javascript\nconst student = {\n  name: 'John Doe',\n  age: 16,\n  scores: {\n    maths: 74,\n    english: 63,\n  },\n}\n\n// We define 3 local variables: name, maths, science\nconst {\n  name,\n  scores: { maths, science = 50 },\n} = student\n\nconsole.log(\n  `${name} scored ${maths} in Maths and ${science} in Elementary Science.`\n)\n\n// John Doe scored 74 in Maths and 50 in Elementary Science.\n```\n\n使用嵌套对象解构时，要小心避免使用空的嵌套对象字面量。虽然它是有效的语法，但它实际上没有赋值。例如，上面的 science，如果改成 `const { name, scores: {maths, science} } = student;`。那么`science`的值将是`undefined`\n\n点运算配合解构赋值：\n\n```javascript\nconst person = {\n  name: 'John Doe',\n  country: 'Canada',\n  city: 'shenzhen',\n  org: '123',\n  id: '1',\n}\n\n// Assign default value of 25 to age if undefined\nconst { id = '', ...all } = person\nconsole.log(all) //{ name: 'John Doe',country: 'Canada',city:'shenzhen',org:'123',}\n```\n\n从案例中我们可以可以通过点运算+对象解构赋值，可以去除对象的属性，并将剩余属性赋值给`all`。\n\n- 从对象中取多个属性，有了新的处理。\n- 从对象中无损删除属性，有了新的处理。\n\n当然我们也可以删除多个属性：\n\n```\nconst person = {\n    name: 'John Doe',\n    country: 'Canada',\n    city:'shenzhen',\n    org:'123',\n    id:'1'\n};\n\n// Assign default value of 25 to age if undefined\nconst { id=\"\",name=\"\", ...all } = person;\nconsole.log(all) //{country: 'Canada',city:'shenzhen',org:'123'}\n```\n\n# 数组解构\n\n> 在数组解构中，您在赋值表达式的左侧使用数组文字。数组文字上的每个变量名都映射到解构数组上同一索引处的相应项目。\n\n```javascript\nconst rgb = [255, 200, 0]\n\n// Array Destructuring\nconst [red, green, blue] = rgb\n\nconsole.log(`R: ${red}, G: ${green}, B: ${blue}`) // R: 255, G: 200, B: 0\n```\n\n#### 逗号可以跳过元素\n\n```javascript\nlet [, , x] = [1, 2, 3, 4]\nconsole.log(x) // 3\n```\n\n#### 数组点运算\n\n```javascript\nlet [x, ...y] = [1, 2, 3, 4]\nconsole.log(x, y) // 1 [2,3,4]\n\nlet [x, y, ...z] = ['a'] // x='a'; y=undefined; z=[]\n\nlet [x, ...[y, z]] = ['a', 'b', 'c']\n// x = 'a'; y = 'b'; z = 'c'\n```\n\n#### 循环\n\n```javascript\nfor (let [key, value] of map) {\n  console.log(key + ' is ' + value)\n}\n```\n\n#### 交换值\n\n```javascript\n;[x, y] = [y, x]\n```\n\n#### 数组删除元素\n\n```javascript\nlet [first, ...rest] = ['a', 'b', 'c']\n// first = 'a'; rest = ['b', 'c']\n```\n\n#### 克隆数组\n\n```javascript\nconst rainbow = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\n\n// Cloning with array destructuring and spread operator\nconst [...rainbowClone] = rainbow\n\nconsole.log(rainbow === rainbowClone) // false\nconsole.log(rainbowClone) // ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\n```\n\n# 字符串解构\n\n字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象\n\n```javascript\nconst [a, b, c, d, e] = 'hello'\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n```\n\n属性解构赋值\n\n```javascript\nlet { length: len } = 'hello'\nlen // 5\n```\n\n**原文地址**： [Destructuring](https://github.com/yihan12/build-up_ES6-ES12/blob/main/variable/Destructuring.md)\n","slug":"ES6学习笔记/【ES6学习笔记】之解构赋值","published":1,"updated":"2023-08-13T06:43:57.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll9eg18u002b4i2vhm7xcbg9","content":"<h1 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h1><blockquote>\n<p>解构只是意味着将复杂的结构分解成更简单的部分。在 JavaScript 中，这种复杂的结构通常是一个对象或一个数组。使用解构语法，您可以从数组和对象中提取更小的片段。解构语法可用于变量声明或变量赋值。您还可以使用嵌套解构语法来处理嵌套结构。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// old</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">  <span class=\"attr\">scores</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">maths</span>: <span class=\"number\">74</span>,</span><br><span class=\"line\">    <span class=\"attr\">english</span>: <span class=\"number\">63</span>,</span><br><span class=\"line\">    <span class=\"attr\">science</span>: <span class=\"number\">85</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">displaySummary</span>(<span class=\"params\">student</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello, &#x27;</span> + student.<span class=\"property\">name</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Your Maths score is &#x27;</span> + (student.<span class=\"property\">scores</span>.<span class=\"property\">maths</span> || <span class=\"number\">0</span>))</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Your English score is &#x27;</span> + (student.<span class=\"property\">scores</span>.<span class=\"property\">english</span> || <span class=\"number\">0</span>))</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Your Science score is &#x27;</span> + (student.<span class=\"property\">scores</span>.<span class=\"property\">science</span> || <span class=\"number\">0</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">displaySummary</span>(student)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hello, John Doe</span></span><br><span class=\"line\"><span class=\"comment\">// Your Maths score is 74</span></span><br><span class=\"line\"><span class=\"comment\">// Your English score is 63</span></span><br><span class=\"line\"><span class=\"comment\">// Your Science score is 85</span></span><br></pre></td></tr></table></figure>\n\n<p>用 ES6 结构赋值，我们可以这么写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">displaySummary</span>(<span class=\"params\">&#123;</span></span><br><span class=\"line\"><span class=\"params\">  name,</span></span><br><span class=\"line\"><span class=\"params\">  scores: &#123; maths = <span class=\"number\">0</span>, english = <span class=\"number\">0</span>, science = <span class=\"number\">0</span> &#125;,</span></span><br><span class=\"line\"><span class=\"params\">&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello, &#x27;</span> + name)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Your Maths score is &#x27;</span> + maths)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Your English score is &#x27;</span> + english)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Your Science score is &#x27;</span> + science)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构\"></a>对象解构</h1><p>对象解构构像是：用变量声明属性，变量值即为属性值，简单来说，就是提取对象中的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstname</span>: <span class=\"string\">&#x27;Glad&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastname</span>: <span class=\"string\">&#x27;Chinda&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">country</span>: <span class=\"string\">&#x27;Nigeria&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object Destructuring</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; firstname, lastname, country &#125; = student</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(firstname, lastname, country) <span class=\"comment\">// Glad Chinda Nigeria</span></span><br></pre></td></tr></table></figure>\n\n<p>利用解构给变量重新赋值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Initialize local variables</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> country = <span class=\"string\">&#x27;Canada&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> firstname = <span class=\"string\">&#x27;John&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> lastname = <span class=\"string\">&#x27;Doe&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstname</span>: <span class=\"string\">&#x27;Glad&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastname</span>: <span class=\"string\">&#x27;Chinda&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">country</span>: <span class=\"string\">&#x27;Nigeria&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Reassign firstname and lastname using destructuring</span></span><br><span class=\"line\"><span class=\"comment\">// Enclose in a pair of parentheses, since this is an assignment expression</span></span><br><span class=\"line\">;(&#123; firstname, lastname &#125; = student)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// country remains unchanged (Canada)</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(firstname, lastname, country) <span class=\"comment\">// Glad Chinda Canada</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码，用解构赋值的方式重新给 firstname, lastname 变量赋值，所以后面打印的时候，firstname, lastname 显示是 student 内部的 firstname, lastname。country 并未重新赋值，所以还是之前定义的名字。如果将中间的代码改为<code>(&#123; firstname, lastname , country&#125; = student);</code>。那么, country 的值也会被重新赋值，为’Nigeria’</p>\n<p>下面看下嵌套对象的结构：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">  <span class=\"attr\">scores</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">maths</span>: <span class=\"number\">74</span>,</span><br><span class=\"line\">    <span class=\"attr\">english</span>: <span class=\"number\">63</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We define 3 local variables: name, maths, science</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  name,</span><br><span class=\"line\">  <span class=\"attr\">scores</span>: &#123; maths, science = <span class=\"number\">50</span> &#125;,</span><br><span class=\"line\">&#125; = student</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">  <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span> scored <span class=\"subst\">$&#123;maths&#125;</span> in Maths and <span class=\"subst\">$&#123;science&#125;</span> in Elementary Science.`</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// John Doe scored 74 in Maths and 50 in Elementary Science.</span></span><br></pre></td></tr></table></figure>\n\n<p>使用嵌套对象解构时，要小心避免使用空的嵌套对象字面量。虽然它是有效的语法，但它实际上没有赋值。例如，上面的 science，如果改成 <code>const &#123; name, scores: &#123;maths, science&#125; &#125; = student;</code>。那么<code>science</code>的值将是<code>undefined</code></p>\n<p>点运算配合解构赋值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">country</span>: <span class=\"string\">&#x27;Canada&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">city</span>: <span class=\"string\">&#x27;shenzhen&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">org</span>: <span class=\"string\">&#x27;123&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Assign default value of 25 to age if undefined</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; id = <span class=\"string\">&#x27;&#x27;</span>, ...all &#125; = person</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(all) <span class=\"comment\">//&#123; name: &#x27;John Doe&#x27;,country: &#x27;Canada&#x27;,city:&#x27;shenzhen&#x27;,org:&#x27;123&#x27;,&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>从案例中我们可以可以通过点运算+对象解构赋值，可以去除对象的属性，并将剩余属性赋值给<code>all</code>。</p>\n<ul>\n<li>从对象中取多个属性，有了新的处理。</li>\n<li>从对象中无损删除属性，有了新的处理。</li>\n</ul>\n<p>当然我们也可以删除多个属性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const person = &#123;</span><br><span class=\"line\">    name: &#x27;John Doe&#x27;,</span><br><span class=\"line\">    country: &#x27;Canada&#x27;,</span><br><span class=\"line\">    city:&#x27;shenzhen&#x27;,</span><br><span class=\"line\">    org:&#x27;123&#x27;,</span><br><span class=\"line\">    id:&#x27;1&#x27;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// Assign default value of 25 to age if undefined</span><br><span class=\"line\">const &#123; id=&quot;&quot;,name=&quot;&quot;, ...all &#125; = person;</span><br><span class=\"line\">console.log(all) //&#123;country: &#x27;Canada&#x27;,city:&#x27;shenzhen&#x27;,org:&#x27;123&#x27;&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数组解构\"><a href=\"#数组解构\" class=\"headerlink\" title=\"数组解构\"></a>数组解构</h1><blockquote>\n<p>在数组解构中，您在赋值表达式的左侧使用数组文字。数组文字上的每个变量名都映射到解构数组上同一索引处的相应项目。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rgb = [<span class=\"number\">255</span>, <span class=\"number\">200</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array Destructuring</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [red, green, blue] = rgb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`R: <span class=\"subst\">$&#123;red&#125;</span>, G: <span class=\"subst\">$&#123;green&#125;</span>, B: <span class=\"subst\">$&#123;blue&#125;</span>`</span>) <span class=\"comment\">// R: 255, G: 200, B: 0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"逗号可以跳过元素\"><a href=\"#逗号可以跳过元素\" class=\"headerlink\" title=\"逗号可以跳过元素\"></a>逗号可以跳过元素</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [, , x] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组点运算\"><a href=\"#数组点运算\" class=\"headerlink\" title=\"数组点运算\"></a>数组点运算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, ...y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x, y) <span class=\"comment\">// 1 [2,3,4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">&#x27;a&#x27;</span>] <span class=\"comment\">// x=&#x27;a&#x27;; y=undefined; z=[]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, ...[y, z]] = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">// x = &#x27;a&#x27;; y = &#x27;b&#x27;; z = &#x27;c&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key + <span class=\"string\">&#x27; is &#x27;</span> + value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"交换值\"><a href=\"#交换值\" class=\"headerlink\" title=\"交换值\"></a>交换值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[x, y] = [y, x]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组删除元素\"><a href=\"#数组删除元素\" class=\"headerlink\" title=\"数组删除元素\"></a>数组删除元素</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [first, ...rest] = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">// first = &#x27;a&#x27;; rest = [&#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"克隆数组\"><a href=\"#克隆数组\" class=\"headerlink\" title=\"克隆数组\"></a>克隆数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rainbow = [<span class=\"string\">&#x27;red&#x27;</span>, <span class=\"string\">&#x27;orange&#x27;</span>, <span class=\"string\">&#x27;yellow&#x27;</span>, <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"string\">&#x27;indigo&#x27;</span>, <span class=\"string\">&#x27;violet&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Cloning with array destructuring and spread operator</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [...rainbowClone] = rainbow</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rainbow === rainbowClone) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rainbowClone) <span class=\"comment\">// [&#x27;red&#x27;, &#x27;orange&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;indigo&#x27;, &#x27;violet&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"字符串解构\"><a href=\"#字符串解构\" class=\"headerlink\" title=\"字符串解构\"></a>字符串解构</h1><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">a <span class=\"comment\">// &quot;h&quot;</span></span><br><span class=\"line\">b <span class=\"comment\">// &quot;e&quot;</span></span><br><span class=\"line\">c <span class=\"comment\">// &quot;l&quot;</span></span><br><span class=\"line\">d <span class=\"comment\">// &quot;l&quot;</span></span><br><span class=\"line\">e <span class=\"comment\">// &quot;o&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>属性解构赋值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">length</span>: len &#125; = <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">len <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>原文地址</strong>： <a href=\"https://github.com/yihan12/build-up_ES6-ES12/blob/main/variable/Destructuring.md\">Destructuring</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h1><blockquote>\n<p>解构只是意味着将复杂的结构分解成更简单的部分。在 JavaScript 中，这种复杂的结构通常是一个对象或一个数组。使用解构语法，您可以从数组和对象中提取更小的片段。解构语法可用于变量声明或变量赋值。您还可以使用嵌套解构语法来处理嵌套结构。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// old</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">  <span class=\"attr\">scores</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">maths</span>: <span class=\"number\">74</span>,</span><br><span class=\"line\">    <span class=\"attr\">english</span>: <span class=\"number\">63</span>,</span><br><span class=\"line\">    <span class=\"attr\">science</span>: <span class=\"number\">85</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">displaySummary</span>(<span class=\"params\">student</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello, &#x27;</span> + student.<span class=\"property\">name</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Your Maths score is &#x27;</span> + (student.<span class=\"property\">scores</span>.<span class=\"property\">maths</span> || <span class=\"number\">0</span>))</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Your English score is &#x27;</span> + (student.<span class=\"property\">scores</span>.<span class=\"property\">english</span> || <span class=\"number\">0</span>))</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Your Science score is &#x27;</span> + (student.<span class=\"property\">scores</span>.<span class=\"property\">science</span> || <span class=\"number\">0</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">displaySummary</span>(student)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hello, John Doe</span></span><br><span class=\"line\"><span class=\"comment\">// Your Maths score is 74</span></span><br><span class=\"line\"><span class=\"comment\">// Your English score is 63</span></span><br><span class=\"line\"><span class=\"comment\">// Your Science score is 85</span></span><br></pre></td></tr></table></figure>\n\n<p>用 ES6 结构赋值，我们可以这么写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">displaySummary</span>(<span class=\"params\">&#123;</span></span><br><span class=\"line\"><span class=\"params\">  name,</span></span><br><span class=\"line\"><span class=\"params\">  scores: &#123; maths = <span class=\"number\">0</span>, english = <span class=\"number\">0</span>, science = <span class=\"number\">0</span> &#125;,</span></span><br><span class=\"line\"><span class=\"params\">&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello, &#x27;</span> + name)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Your Maths score is &#x27;</span> + maths)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Your English score is &#x27;</span> + english)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Your Science score is &#x27;</span> + science)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构\"></a>对象解构</h1><p>对象解构构像是：用变量声明属性，变量值即为属性值，简单来说，就是提取对象中的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstname</span>: <span class=\"string\">&#x27;Glad&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastname</span>: <span class=\"string\">&#x27;Chinda&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">country</span>: <span class=\"string\">&#x27;Nigeria&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object Destructuring</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; firstname, lastname, country &#125; = student</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(firstname, lastname, country) <span class=\"comment\">// Glad Chinda Nigeria</span></span><br></pre></td></tr></table></figure>\n\n<p>利用解构给变量重新赋值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Initialize local variables</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> country = <span class=\"string\">&#x27;Canada&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> firstname = <span class=\"string\">&#x27;John&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> lastname = <span class=\"string\">&#x27;Doe&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstname</span>: <span class=\"string\">&#x27;Glad&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastname</span>: <span class=\"string\">&#x27;Chinda&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">country</span>: <span class=\"string\">&#x27;Nigeria&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Reassign firstname and lastname using destructuring</span></span><br><span class=\"line\"><span class=\"comment\">// Enclose in a pair of parentheses, since this is an assignment expression</span></span><br><span class=\"line\">;(&#123; firstname, lastname &#125; = student)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// country remains unchanged (Canada)</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(firstname, lastname, country) <span class=\"comment\">// Glad Chinda Canada</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码，用解构赋值的方式重新给 firstname, lastname 变量赋值，所以后面打印的时候，firstname, lastname 显示是 student 内部的 firstname, lastname。country 并未重新赋值，所以还是之前定义的名字。如果将中间的代码改为<code>(&#123; firstname, lastname , country&#125; = student);</code>。那么, country 的值也会被重新赋值，为’Nigeria’</p>\n<p>下面看下嵌套对象的结构：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">  <span class=\"attr\">scores</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">maths</span>: <span class=\"number\">74</span>,</span><br><span class=\"line\">    <span class=\"attr\">english</span>: <span class=\"number\">63</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We define 3 local variables: name, maths, science</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  name,</span><br><span class=\"line\">  <span class=\"attr\">scores</span>: &#123; maths, science = <span class=\"number\">50</span> &#125;,</span><br><span class=\"line\">&#125; = student</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">  <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span> scored <span class=\"subst\">$&#123;maths&#125;</span> in Maths and <span class=\"subst\">$&#123;science&#125;</span> in Elementary Science.`</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// John Doe scored 74 in Maths and 50 in Elementary Science.</span></span><br></pre></td></tr></table></figure>\n\n<p>使用嵌套对象解构时，要小心避免使用空的嵌套对象字面量。虽然它是有效的语法，但它实际上没有赋值。例如，上面的 science，如果改成 <code>const &#123; name, scores: &#123;maths, science&#125; &#125; = student;</code>。那么<code>science</code>的值将是<code>undefined</code></p>\n<p>点运算配合解构赋值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">country</span>: <span class=\"string\">&#x27;Canada&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">city</span>: <span class=\"string\">&#x27;shenzhen&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">org</span>: <span class=\"string\">&#x27;123&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Assign default value of 25 to age if undefined</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; id = <span class=\"string\">&#x27;&#x27;</span>, ...all &#125; = person</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(all) <span class=\"comment\">//&#123; name: &#x27;John Doe&#x27;,country: &#x27;Canada&#x27;,city:&#x27;shenzhen&#x27;,org:&#x27;123&#x27;,&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>从案例中我们可以可以通过点运算+对象解构赋值，可以去除对象的属性，并将剩余属性赋值给<code>all</code>。</p>\n<ul>\n<li>从对象中取多个属性，有了新的处理。</li>\n<li>从对象中无损删除属性，有了新的处理。</li>\n</ul>\n<p>当然我们也可以删除多个属性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const person = &#123;</span><br><span class=\"line\">    name: &#x27;John Doe&#x27;,</span><br><span class=\"line\">    country: &#x27;Canada&#x27;,</span><br><span class=\"line\">    city:&#x27;shenzhen&#x27;,</span><br><span class=\"line\">    org:&#x27;123&#x27;,</span><br><span class=\"line\">    id:&#x27;1&#x27;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// Assign default value of 25 to age if undefined</span><br><span class=\"line\">const &#123; id=&quot;&quot;,name=&quot;&quot;, ...all &#125; = person;</span><br><span class=\"line\">console.log(all) //&#123;country: &#x27;Canada&#x27;,city:&#x27;shenzhen&#x27;,org:&#x27;123&#x27;&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数组解构\"><a href=\"#数组解构\" class=\"headerlink\" title=\"数组解构\"></a>数组解构</h1><blockquote>\n<p>在数组解构中，您在赋值表达式的左侧使用数组文字。数组文字上的每个变量名都映射到解构数组上同一索引处的相应项目。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rgb = [<span class=\"number\">255</span>, <span class=\"number\">200</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array Destructuring</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [red, green, blue] = rgb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`R: <span class=\"subst\">$&#123;red&#125;</span>, G: <span class=\"subst\">$&#123;green&#125;</span>, B: <span class=\"subst\">$&#123;blue&#125;</span>`</span>) <span class=\"comment\">// R: 255, G: 200, B: 0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"逗号可以跳过元素\"><a href=\"#逗号可以跳过元素\" class=\"headerlink\" title=\"逗号可以跳过元素\"></a>逗号可以跳过元素</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [, , x] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组点运算\"><a href=\"#数组点运算\" class=\"headerlink\" title=\"数组点运算\"></a>数组点运算</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, ...y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x, y) <span class=\"comment\">// 1 [2,3,4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">&#x27;a&#x27;</span>] <span class=\"comment\">// x=&#x27;a&#x27;; y=undefined; z=[]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, ...[y, z]] = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">// x = &#x27;a&#x27;; y = &#x27;b&#x27;; z = &#x27;c&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key + <span class=\"string\">&#x27; is &#x27;</span> + value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"交换值\"><a href=\"#交换值\" class=\"headerlink\" title=\"交换值\"></a>交换值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[x, y] = [y, x]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组删除元素\"><a href=\"#数组删除元素\" class=\"headerlink\" title=\"数组删除元素\"></a>数组删除元素</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [first, ...rest] = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">// first = &#x27;a&#x27;; rest = [&#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"克隆数组\"><a href=\"#克隆数组\" class=\"headerlink\" title=\"克隆数组\"></a>克隆数组</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rainbow = [<span class=\"string\">&#x27;red&#x27;</span>, <span class=\"string\">&#x27;orange&#x27;</span>, <span class=\"string\">&#x27;yellow&#x27;</span>, <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"string\">&#x27;indigo&#x27;</span>, <span class=\"string\">&#x27;violet&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Cloning with array destructuring and spread operator</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [...rainbowClone] = rainbow</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rainbow === rainbowClone) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rainbowClone) <span class=\"comment\">// [&#x27;red&#x27;, &#x27;orange&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;indigo&#x27;, &#x27;violet&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"字符串解构\"><a href=\"#字符串解构\" class=\"headerlink\" title=\"字符串解构\"></a>字符串解构</h1><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">a <span class=\"comment\">// &quot;h&quot;</span></span><br><span class=\"line\">b <span class=\"comment\">// &quot;e&quot;</span></span><br><span class=\"line\">c <span class=\"comment\">// &quot;l&quot;</span></span><br><span class=\"line\">d <span class=\"comment\">// &quot;l&quot;</span></span><br><span class=\"line\">e <span class=\"comment\">// &quot;o&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>属性解构赋值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">length</span>: len &#125; = <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">len <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>原文地址</strong>： <a href=\"https://github.com/yihan12/build-up_ES6-ES12/blob/main/variable/Destructuring.md\">Destructuring</a></p>\n"},{"title":"【Echarts使用】之 设置柱子borderRadius","date":"2022-03-10T03:38:56.351Z","_content":"\n```\nseries:[\n    {\n        type: 'bar',\n        stack: 'Total',\n        itemStyle: {\n            borderColor: bgColor,\n            borderRadius: [4, 4, 4, 4], // 圆柱\n            color: bgColor\n        },\n        emphasis: {\n            itemStyle: {\n                borderColor: bgColor,\n                color: bgColor\n            }\n        },\n    }\n]\n```\n","source":"_posts/Echarts/echarts圆柱--设置柱子的borderRadius.md","raw":"---\ntitle: 【Echarts使用】之 设置柱子borderRadius\ndate:\ntags: [前端, Echarts]\ncategories: [前端, Echarts, borderRadius]\n---\n\n```\nseries:[\n    {\n        type: 'bar',\n        stack: 'Total',\n        itemStyle: {\n            borderColor: bgColor,\n            borderRadius: [4, 4, 4, 4], // 圆柱\n            color: bgColor\n        },\n        emphasis: {\n            itemStyle: {\n                borderColor: bgColor,\n                color: bgColor\n            }\n        },\n    }\n]\n```\n","slug":"Echarts/echarts圆柱--设置柱子的borderRadius","published":1,"updated":"2023-08-13T12:02:48.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll9eg18u002c4i2v207l510o","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">series:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: &#x27;bar&#x27;,</span><br><span class=\"line\">        stack: &#x27;Total&#x27;,</span><br><span class=\"line\">        itemStyle: &#123;</span><br><span class=\"line\">            borderColor: bgColor,</span><br><span class=\"line\">            borderRadius: [4, 4, 4, 4], // 圆柱</span><br><span class=\"line\">            color: bgColor</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        emphasis: &#123;</span><br><span class=\"line\">            itemStyle: &#123;</span><br><span class=\"line\">                borderColor: bgColor,</span><br><span class=\"line\">                color: bgColor</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">series:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: &#x27;bar&#x27;,</span><br><span class=\"line\">        stack: &#x27;Total&#x27;,</span><br><span class=\"line\">        itemStyle: &#123;</span><br><span class=\"line\">            borderColor: bgColor,</span><br><span class=\"line\">            borderRadius: [4, 4, 4, 4], // 圆柱</span><br><span class=\"line\">            color: bgColor</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        emphasis: &#123;</span><br><span class=\"line\">            itemStyle: &#123;</span><br><span class=\"line\">                borderColor: bgColor,</span><br><span class=\"line\">                color: bgColor</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n"},{"title":"【Echarts使用】之 无拐点","date":"2022-03-10T03:39:04.601Z","_content":"\n### 无拐点\n\n```\nseries: [\n    {\n      data: [820, 932, 901, 934, 1290, 1330, 1320],\n      type: 'line',\n      smooth: true, //关键点，为true是不支持虚线的，实线就用true\n      symbolSize:0,   // 折线拐点圆的大小\n\n    }\n]\n```\n\n### 折线线型\n\n```\nseries: [\n    {\n      data: [820, 932, 901, 934, 1290, 1330, 1320],\n      type: 'line',\n      lineStyle:{\n\n                  width:2,\n                  type:'dotted'  //'dotted'虚线 'solid'实线 'dashed'虚线\n\n\n      }\n    }\n]\n\n```\n","source":"_posts/Echarts/echarts折线图--无拐点，折线样式.md","raw":"---\ntitle: 【Echarts使用】之 无拐点\ndate:\ntags: [前端, Echarts]\ncategories: [前端, Echarts, symbolSize]\n---\n\n### 无拐点\n\n```\nseries: [\n    {\n      data: [820, 932, 901, 934, 1290, 1330, 1320],\n      type: 'line',\n      smooth: true, //关键点，为true是不支持虚线的，实线就用true\n      symbolSize:0,   // 折线拐点圆的大小\n\n    }\n]\n```\n\n### 折线线型\n\n```\nseries: [\n    {\n      data: [820, 932, 901, 934, 1290, 1330, 1320],\n      type: 'line',\n      lineStyle:{\n\n                  width:2,\n                  type:'dotted'  //'dotted'虚线 'solid'实线 'dashed'虚线\n\n\n      }\n    }\n]\n\n```\n","slug":"Echarts/echarts折线图--无拐点，折线样式","published":1,"updated":"2023-08-13T12:03:39.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll9eg18v002e4i2v8vg8h2ib","content":"<h3 id=\"无拐点\"><a href=\"#无拐点\" class=\"headerlink\" title=\"无拐点\"></a>无拐点</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">series: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      data: [820, 932, 901, 934, 1290, 1330, 1320],</span><br><span class=\"line\">      type: &#x27;line&#x27;,</span><br><span class=\"line\">      smooth: true, //关键点，为true是不支持虚线的，实线就用true</span><br><span class=\"line\">      symbolSize:0,   // 折线拐点圆的大小</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"折线线型\"><a href=\"#折线线型\" class=\"headerlink\" title=\"折线线型\"></a>折线线型</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">series: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      data: [820, 932, 901, 934, 1290, 1330, 1320],</span><br><span class=\"line\">      type: &#x27;line&#x27;,</span><br><span class=\"line\">      lineStyle:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                  width:2,</span><br><span class=\"line\">                  type:&#x27;dotted&#x27;  //&#x27;dotted&#x27;虚线 &#x27;solid&#x27;实线 &#x27;dashed&#x27;虚线</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"无拐点\"><a href=\"#无拐点\" class=\"headerlink\" title=\"无拐点\"></a>无拐点</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">series: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      data: [820, 932, 901, 934, 1290, 1330, 1320],</span><br><span class=\"line\">      type: &#x27;line&#x27;,</span><br><span class=\"line\">      smooth: true, //关键点，为true是不支持虚线的，实线就用true</span><br><span class=\"line\">      symbolSize:0,   // 折线拐点圆的大小</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"折线线型\"><a href=\"#折线线型\" class=\"headerlink\" title=\"折线线型\"></a>折线线型</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">series: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      data: [820, 932, 901, 934, 1290, 1330, 1320],</span><br><span class=\"line\">      type: &#x27;line&#x27;,</span><br><span class=\"line\">      lineStyle:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                  width:2,</span><br><span class=\"line\">                  type:&#x27;dotted&#x27;  //&#x27;dotted&#x27;虚线 &#x27;solid&#x27;实线 &#x27;dashed&#x27;虚线</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"【Echarts使用】之 设置从原点开始","date":"2022-03-10T03:38:44.099Z","_content":"\n```\nxAxis:{\n    boundaryGap: false, // 不留白，从原点开始\n}\n```\n","source":"_posts/Echarts/echarts设置从原点开始.md","raw":"---\ntitle: 【Echarts使用】之 设置从原点开始\ndate:\ntags: [前端, Echarts]\ncategories: [前端, Echarts, boundaryGap]\n---\n\n```\nxAxis:{\n    boundaryGap: false, // 不留白，从原点开始\n}\n```\n","slug":"Echarts/echarts设置从原点开始","published":1,"updated":"2023-08-13T12:01:14.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll9eg18w002h4i2v5zxob6b6","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xAxis:&#123;</span><br><span class=\"line\">    boundaryGap: false, // 不留白，从原点开始</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xAxis:&#123;</span><br><span class=\"line\">    boundaryGap: false, // 不留白，从原点开始</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"【Echarts使用】之 拐点圆样式","date":"2022-03-10T03:39:13.518Z","_content":"\n```\nseries:[\n    {\n        type: 'line',\n        connectNulls: true,//无数据是是否连线\n        stack: 'Total',\n        symbol: 'circle', //拐点样式\n        symbolSize: 4, //拐点圆大小\n        itemStyle: {\n            color: '#292B37', //拐点内圆颜色\n            borderColor: '#5B5E74', //拐点外圆颜色\n            width: 2, //拐点内圆大小\n        },\n    }\n]\n```\n","source":"_posts/Echarts/echats折线--拐点圆的样式（内圆外圆）.md","raw":"---\ntitle: 【Echarts使用】之 拐点圆样式\ndate:\ntags: [前端, Echarts]\ncategories: [前端, Echarts, symbol]\n---\n\n```\nseries:[\n    {\n        type: 'line',\n        connectNulls: true,//无数据是是否连线\n        stack: 'Total',\n        symbol: 'circle', //拐点样式\n        symbolSize: 4, //拐点圆大小\n        itemStyle: {\n            color: '#292B37', //拐点内圆颜色\n            borderColor: '#5B5E74', //拐点外圆颜色\n            width: 2, //拐点内圆大小\n        },\n    }\n]\n```\n","slug":"Echarts/echats折线--拐点圆的样式（内圆外圆）","published":1,"updated":"2023-08-13T12:05:01.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll9eg18x002j4i2v5y9i32uu","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">series:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: &#x27;line&#x27;,</span><br><span class=\"line\">        connectNulls: true,//无数据是是否连线</span><br><span class=\"line\">        stack: &#x27;Total&#x27;,</span><br><span class=\"line\">        symbol: &#x27;circle&#x27;, //拐点样式</span><br><span class=\"line\">        symbolSize: 4, //拐点圆大小</span><br><span class=\"line\">        itemStyle: &#123;</span><br><span class=\"line\">            color: &#x27;#292B37&#x27;, //拐点内圆颜色</span><br><span class=\"line\">            borderColor: &#x27;#5B5E74&#x27;, //拐点外圆颜色</span><br><span class=\"line\">            width: 2, //拐点内圆大小</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">series:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: &#x27;line&#x27;,</span><br><span class=\"line\">        connectNulls: true,//无数据是是否连线</span><br><span class=\"line\">        stack: &#x27;Total&#x27;,</span><br><span class=\"line\">        symbol: &#x27;circle&#x27;, //拐点样式</span><br><span class=\"line\">        symbolSize: 4, //拐点圆大小</span><br><span class=\"line\">        itemStyle: &#123;</span><br><span class=\"line\">            color: &#x27;#292B37&#x27;, //拐点内圆颜色</span><br><span class=\"line\">            borderColor: &#x27;#5B5E74&#x27;, //拐点外圆颜色</span><br><span class=\"line\">            width: 2, //拐点内圆大小</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n"},{"title":"【Echarts使用】之 设置柱状图渐进式","date":"2022-03-10T03:39:08.919Z","_content":"\n```\nseries:[\n    {\n        type: 'bar',\n        stack: 'Total',\n        itemStyle: {\n            borderRadius: [4, 4, 4, 4], // 圆柱\n            color: function (params) {\n                //首先定义一个数组\n                const colorList = [\n                    {\n                        x: 0,\n                        y: 1,\n                        x2: 0,\n                        y2: 0,\n                        colorStops: [{\n                            offset: 0, color: '#3BABFF' // 0% 处的颜色\n                        }, {\n                            offset: 1, color: '#7548FF' // 100% 处的颜色\n                        }],\n                        global: false // 缺省为 false\n                    }, \"#514FA4\", \"#373948\"];\n                if (params.data.type == \"达标\") {\n                    return colorList[0]\n                } else if (params.data.type == \"未达标\") {\n                    return colorList[1]\n                } else {\n                    return colorList[2]\n                }\n            },\n        },\n    }\n]\n```\n","source":"_posts/Echarts/echarts柱形--设置柱子多个颜色（渐进色）.md","raw":"---\ntitle: 【Echarts使用】之 设置柱状图渐进式\ndate:\ntags: [前端, Echarts]\ncategories: [前端, Echarts, itemStyle]\n---\n\n```\nseries:[\n    {\n        type: 'bar',\n        stack: 'Total',\n        itemStyle: {\n            borderRadius: [4, 4, 4, 4], // 圆柱\n            color: function (params) {\n                //首先定义一个数组\n                const colorList = [\n                    {\n                        x: 0,\n                        y: 1,\n                        x2: 0,\n                        y2: 0,\n                        colorStops: [{\n                            offset: 0, color: '#3BABFF' // 0% 处的颜色\n                        }, {\n                            offset: 1, color: '#7548FF' // 100% 处的颜色\n                        }],\n                        global: false // 缺省为 false\n                    }, \"#514FA4\", \"#373948\"];\n                if (params.data.type == \"达标\") {\n                    return colorList[0]\n                } else if (params.data.type == \"未达标\") {\n                    return colorList[1]\n                } else {\n                    return colorList[2]\n                }\n            },\n        },\n    }\n]\n```\n","slug":"Echarts/echarts柱形--设置柱子多个颜色（渐进色）","published":1,"updated":"2023-08-13T12:04:11.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cll9eg190002m4i2vadwe1syb","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">series:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: &#x27;bar&#x27;,</span><br><span class=\"line\">        stack: &#x27;Total&#x27;,</span><br><span class=\"line\">        itemStyle: &#123;</span><br><span class=\"line\">            borderRadius: [4, 4, 4, 4], // 圆柱</span><br><span class=\"line\">            color: function (params) &#123;</span><br><span class=\"line\">                //首先定义一个数组</span><br><span class=\"line\">                const colorList = [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        x: 0,</span><br><span class=\"line\">                        y: 1,</span><br><span class=\"line\">                        x2: 0,</span><br><span class=\"line\">                        y2: 0,</span><br><span class=\"line\">                        colorStops: [&#123;</span><br><span class=\"line\">                            offset: 0, color: &#x27;#3BABFF&#x27; // 0% 处的颜色</span><br><span class=\"line\">                        &#125;, &#123;</span><br><span class=\"line\">                            offset: 1, color: &#x27;#7548FF&#x27; // 100% 处的颜色</span><br><span class=\"line\">                        &#125;],</span><br><span class=\"line\">                        global: false // 缺省为 false</span><br><span class=\"line\">                    &#125;, &quot;#514FA4&quot;, &quot;#373948&quot;];</span><br><span class=\"line\">                if (params.data.type == &quot;达标&quot;) &#123;</span><br><span class=\"line\">                    return colorList[0]</span><br><span class=\"line\">                &#125; else if (params.data.type == &quot;未达标&quot;) &#123;</span><br><span class=\"line\">                    return colorList[1]</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    return colorList[2]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">series:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: &#x27;bar&#x27;,</span><br><span class=\"line\">        stack: &#x27;Total&#x27;,</span><br><span class=\"line\">        itemStyle: &#123;</span><br><span class=\"line\">            borderRadius: [4, 4, 4, 4], // 圆柱</span><br><span class=\"line\">            color: function (params) &#123;</span><br><span class=\"line\">                //首先定义一个数组</span><br><span class=\"line\">                const colorList = [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        x: 0,</span><br><span class=\"line\">                        y: 1,</span><br><span class=\"line\">                        x2: 0,</span><br><span class=\"line\">                        y2: 0,</span><br><span class=\"line\">                        colorStops: [&#123;</span><br><span class=\"line\">                            offset: 0, color: &#x27;#3BABFF&#x27; // 0% 处的颜色</span><br><span class=\"line\">                        &#125;, &#123;</span><br><span class=\"line\">                            offset: 1, color: &#x27;#7548FF&#x27; // 100% 处的颜色</span><br><span class=\"line\">                        &#125;],</span><br><span class=\"line\">                        global: false // 缺省为 false</span><br><span class=\"line\">                    &#125;, &quot;#514FA4&quot;, &quot;#373948&quot;];</span><br><span class=\"line\">                if (params.data.type == &quot;达标&quot;) &#123;</span><br><span class=\"line\">                    return colorList[0]</span><br><span class=\"line\">                &#125; else if (params.data.type == &quot;未达标&quot;) &#123;</span><br><span class=\"line\">                    return colorList[1]</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    return colorList[2]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cll9eg18f00014i2v4yrhcav0","category_id":"cll9eg18i00044i2v2or3glok","_id":"cll9eg18o000s4i2vh13x7ixd"},{"post_id":"cll9eg18f00014i2v4yrhcav0","category_id":"cll9eg18o000m4i2v8ogeeqfs","_id":"cll9eg18p000v4i2v449idcsu"},{"post_id":"cll9eg18j00094i2v81or1t4t","category_id":"cll9eg18i00044i2v2or3glok","_id":"cll9eg18r001f4i2vafesfkv1"},{"post_id":"cll9eg18j00094i2v81or1t4t","category_id":"cll9eg18n000j4i2v30fsd7l5","_id":"cll9eg18r001i4i2v5pny0jhq"},{"post_id":"cll9eg18j00094i2v81or1t4t","category_id":"cll9eg18q00194i2v9uxzg2c7","_id":"cll9eg18s001k4i2vaixk05ms"},{"post_id":"cll9eg18k000a4i2v51zc666j","category_id":"cll9eg18i00044i2v2or3glok","_id":"cll9eg18s001o4i2v935a7jnz"},{"post_id":"cll9eg18k000a4i2v51zc666j","category_id":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg18s001p4i2va84l5lsk"},{"post_id":"cll9eg18k000a4i2v51zc666j","category_id":"cll9eg18r001c4i2v7umj9tp9","_id":"cll9eg18s001r4i2v64q2giv0"},{"post_id":"cll9eg18l000d4i2v5uei48rc","category_id":"cll9eg18i00044i2v2or3glok","_id":"cll9eg18s001t4i2vexjq24jk"},{"post_id":"cll9eg18l000d4i2v5uei48rc","category_id":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg18t001w4i2v61dx1rfe"},{"post_id":"cll9eg18l000d4i2v5uei48rc","category_id":"cll9eg18r001g4i2v1xju2icj","_id":"cll9eg18t001x4i2v6hr81eqm"},{"post_id":"cll9eg18h00034i2veqeufxug","category_id":"cll9eg18i00044i2v2or3glok","_id":"cll9eg18t001y4i2v2d339go1"},{"post_id":"cll9eg18h00034i2veqeufxug","category_id":"cll9eg18p000x4i2vev9mafpc","_id":"cll9eg18t00204i2vc6a4hbcv"},{"post_id":"cll9eg18h00034i2veqeufxug","category_id":"cll9eg18s001n4i2v3arq199n","_id":"cll9eg18t00214i2v8vf1b8n5"},{"post_id":"cll9eg18m000e4i2vbg47afa6","category_id":"cll9eg18i00044i2v2or3glok","_id":"cll9eg18t00224i2v77q2esob"},{"post_id":"cll9eg18m000e4i2vbg47afa6","category_id":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg18t00234i2vewhfhg9o"},{"post_id":"cll9eg18m000e4i2vbg47afa6","category_id":"cll9eg18s001q4i2v0qnff9ho","_id":"cll9eg18t00244i2v22rbcnla"},{"post_id":"cll9eg18m000h4i2v4b1ifv1d","category_id":"cll9eg18i00044i2v2or3glok","_id":"cll9eg18t00254i2v5808e7cs"},{"post_id":"cll9eg18m000h4i2v4b1ifv1d","category_id":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg18t00264i2vfnkpbct3"},{"post_id":"cll9eg18m000h4i2v4b1ifv1d","category_id":"cll9eg18s001v4i2v0kge2he8","_id":"cll9eg18t00274i2v0wf45nei"},{"post_id":"cll9eg18j00074i2v71vc5aeg","category_id":"cll9eg18i00044i2v2or3glok","_id":"cll9eg18t00284i2v7z4o7gne"},{"post_id":"cll9eg18j00074i2v71vc5aeg","category_id":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg18t00294i2v3p5v5jb2"},{"post_id":"cll9eg18j00074i2v71vc5aeg","category_id":"cll9eg18t001z4i2vfk8ia508","_id":"cll9eg18t002a4i2vfygm870x"},{"post_id":"cll9eg18u002b4i2vhm7xcbg9","category_id":"cll9eg18i00044i2v2or3glok","_id":"cll9eg190002o4i2v4v0p4sl2"},{"post_id":"cll9eg18u002b4i2vhm7xcbg9","category_id":"cll9eg18p000x4i2vev9mafpc","_id":"cll9eg191002r4i2v7vjk4b8m"},{"post_id":"cll9eg18u002b4i2vhm7xcbg9","category_id":"cll9eg18v002f4i2vehi26sjr","_id":"cll9eg191002t4i2v0ephcizf"},{"post_id":"cll9eg18u002c4i2v207l510o","category_id":"cll9eg18i00044i2v2or3glok","_id":"cll9eg191002w4i2v7u5dfu2e"},{"post_id":"cll9eg18u002c4i2v207l510o","category_id":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg191002y4i2vclwm33h7"},{"post_id":"cll9eg18u002c4i2v207l510o","category_id":"cll9eg18z002k4i2vglzmg6ma","_id":"cll9eg19100314i2vhzcjgd2n"},{"post_id":"cll9eg18v002e4i2v8vg8h2ib","category_id":"cll9eg18i00044i2v2or3glok","_id":"cll9eg19100334i2vcmx306hd"},{"post_id":"cll9eg18v002e4i2v8vg8h2ib","category_id":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg19200364i2v4je5decv"},{"post_id":"cll9eg18v002e4i2v8vg8h2ib","category_id":"cll9eg190002p4i2v5ymkdox8","_id":"cll9eg19200374i2va29g6v07"},{"post_id":"cll9eg18w002h4i2v5zxob6b6","category_id":"cll9eg18i00044i2v2or3glok","_id":"cll9eg19200384i2v3fid25qz"},{"post_id":"cll9eg18w002h4i2v5zxob6b6","category_id":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg19200394i2v5j0cd8y6"},{"post_id":"cll9eg18w002h4i2v5zxob6b6","category_id":"cll9eg191002v4i2vg16eb5y5","_id":"cll9eg192003a4i2v8wbxgri7"},{"post_id":"cll9eg18x002j4i2v5y9i32uu","category_id":"cll9eg18i00044i2v2or3glok","_id":"cll9eg192003b4i2v600o0f8f"},{"post_id":"cll9eg18x002j4i2v5y9i32uu","category_id":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg192003c4i2v5b4s3su2"},{"post_id":"cll9eg18x002j4i2v5y9i32uu","category_id":"cll9eg19100304i2vbcw1be6t","_id":"cll9eg192003d4i2vbl786utg"},{"post_id":"cll9eg190002m4i2vadwe1syb","category_id":"cll9eg18i00044i2v2or3glok","_id":"cll9eg192003e4i2v46w35mth"},{"post_id":"cll9eg190002m4i2vadwe1syb","category_id":"cll9eg18o000p4i2vbwpbgafe","_id":"cll9eg192003f4i2vf4g77ehg"},{"post_id":"cll9eg190002m4i2vadwe1syb","category_id":"cll9eg19200354i2v0z5b18o2","_id":"cll9eg192003g4i2v8opyemog"}],"PostTag":[{"post_id":"cll9eg18f00014i2v4yrhcav0","tag_id":"cll9eg18i00054i2vhr3x7tqu","_id":"cll9eg18n000i4i2v01xt6gif"},{"post_id":"cll9eg18f00014i2v4yrhcav0","tag_id":"cll9eg18k000c4i2vfi810ohi","_id":"cll9eg18n000k4i2v0lwt609f"},{"post_id":"cll9eg18h00034i2veqeufxug","tag_id":"cll9eg18m000g4i2v9v7u5xl1","_id":"cll9eg18o000o4i2v92rmeeu6"},{"post_id":"cll9eg18h00034i2veqeufxug","tag_id":"cll9eg18n000l4i2v1eftemp1","_id":"cll9eg18o000q4i2v4yxnhol2"},{"post_id":"cll9eg18j00074i2v71vc5aeg","tag_id":"cll9eg18o000n4i2v57i2gpy8","_id":"cll9eg18p000w4i2v3z70f69q"},{"post_id":"cll9eg18j00074i2v71vc5aeg","tag_id":"cll9eg18o000r4i2v7gic7nof","_id":"cll9eg18p000y4i2v7aueb30q"},{"post_id":"cll9eg18j00094i2v81or1t4t","tag_id":"cll9eg18p000u4i2vdxz54z4t","_id":"cll9eg18p00104i2vbzq92gwh"},{"post_id":"cll9eg18k000a4i2v51zc666j","tag_id":"cll9eg18o000n4i2v57i2gpy8","_id":"cll9eg18q00154i2v1m43hd1p"},{"post_id":"cll9eg18k000a4i2v51zc666j","tag_id":"cll9eg18o000r4i2v7gic7nof","_id":"cll9eg18q00174i2veiutgjl3"},{"post_id":"cll9eg18l000d4i2v5uei48rc","tag_id":"cll9eg18o000n4i2v57i2gpy8","_id":"cll9eg18r001b4i2vcfaaf543"},{"post_id":"cll9eg18l000d4i2v5uei48rc","tag_id":"cll9eg18o000r4i2v7gic7nof","_id":"cll9eg18r001d4i2vgmjid2u0"},{"post_id":"cll9eg18m000e4i2vbg47afa6","tag_id":"cll9eg18o000n4i2v57i2gpy8","_id":"cll9eg18r001j4i2v1x3uew9b"},{"post_id":"cll9eg18m000e4i2vbg47afa6","tag_id":"cll9eg18o000r4i2v7gic7nof","_id":"cll9eg18s001l4i2vd1vahun4"},{"post_id":"cll9eg18m000h4i2v4b1ifv1d","tag_id":"cll9eg18o000n4i2v57i2gpy8","_id":"cll9eg18s001s4i2vf2v6egpw"},{"post_id":"cll9eg18m000h4i2v4b1ifv1d","tag_id":"cll9eg18o000r4i2v7gic7nof","_id":"cll9eg18s001u4i2v7nofhk6g"},{"post_id":"cll9eg18u002b4i2vhm7xcbg9","tag_id":"cll9eg18m000g4i2v9v7u5xl1","_id":"cll9eg18v002d4i2v2wmc86hm"},{"post_id":"cll9eg18u002b4i2vhm7xcbg9","tag_id":"cll9eg18n000l4i2v1eftemp1","_id":"cll9eg18w002g4i2vgje7hokn"},{"post_id":"cll9eg18u002c4i2v207l510o","tag_id":"cll9eg18o000n4i2v57i2gpy8","_id":"cll9eg18x002i4i2v9q7d92kw"},{"post_id":"cll9eg18u002c4i2v207l510o","tag_id":"cll9eg18o000r4i2v7gic7nof","_id":"cll9eg190002l4i2vecq2185t"},{"post_id":"cll9eg18v002e4i2v8vg8h2ib","tag_id":"cll9eg18o000n4i2v57i2gpy8","_id":"cll9eg190002n4i2v870i28tr"},{"post_id":"cll9eg18v002e4i2v8vg8h2ib","tag_id":"cll9eg18o000r4i2v7gic7nof","_id":"cll9eg191002q4i2vbjz83elk"},{"post_id":"cll9eg18w002h4i2v5zxob6b6","tag_id":"cll9eg18o000n4i2v57i2gpy8","_id":"cll9eg191002s4i2v9be86bei"},{"post_id":"cll9eg18w002h4i2v5zxob6b6","tag_id":"cll9eg18o000r4i2v7gic7nof","_id":"cll9eg191002u4i2vbk4p78rz"},{"post_id":"cll9eg18x002j4i2v5y9i32uu","tag_id":"cll9eg18o000n4i2v57i2gpy8","_id":"cll9eg191002x4i2vhmfqgooc"},{"post_id":"cll9eg18x002j4i2v5y9i32uu","tag_id":"cll9eg18o000r4i2v7gic7nof","_id":"cll9eg191002z4i2v72r99pc8"},{"post_id":"cll9eg190002m4i2vadwe1syb","tag_id":"cll9eg18o000n4i2v57i2gpy8","_id":"cll9eg19100324i2vdrtue7l8"},{"post_id":"cll9eg190002m4i2vadwe1syb","tag_id":"cll9eg18o000r4i2v7gic7nof","_id":"cll9eg19200344i2vfk2vduux"}],"Tag":[{"name":"js","_id":"cll9eg18i00054i2vhr3x7tqu"},{"name":"正则","_id":"cll9eg18k000c4i2vfi810ohi"},{"name":"JavaScript","_id":"cll9eg18m000g4i2v9v7u5xl1"},{"name":"ES6","_id":"cll9eg18n000l4i2v1eftemp1"},{"name":"前端","_id":"cll9eg18o000n4i2v57i2gpy8"},{"name":"Echarts","_id":"cll9eg18o000r4i2v7gic7nof"},{"name":"浏览器","_id":"cll9eg18p000u4i2vdxz54z4t"}]}}